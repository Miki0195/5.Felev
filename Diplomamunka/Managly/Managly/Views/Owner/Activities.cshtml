@model List<Managly.Models.OwnerDashboard.RecentActivityLog>
@{
    ViewData["Title"] = "Activity Logs";
    Layout = "~/Views/Shared/_OwnerLayout.cshtml";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 text-gray-800">Activity Logs</h1>
        <div class="d-flex">
            <div class="input-group">
                <input type="text" id="activitySearch" class="form-control" placeholder="Search activities...">
                <button class="btn btn-primary" type="button">
                    <i class="fas fa-search"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Activity Filter Card -->
    <div class="card shadow mb-4 fade-in">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold">Filter Activities</h6>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-4 mb-3">
                    <label class="form-label">Activity Type</label>
                    <select id="activityTypeFilter" class="form-select">
                        <option value="">All Types</option>
                        <option value="CompanyRegistered">Company Registered</option>
                        <option value="CompanyDeleted">Company Deleted</option>
                        <option value="LicenseKeysGenerated">License Keys Generated</option>
                        <option value="LicenseKeyUpdated">License Key Updated</option>
                        <option value="LicenseKeyRevoked">License Key Revoked</option>
                        <option value="LicenseKeyDeleted">License Key Deleted</option>
                    </select>
                </div>
                <div class="col-md-4 mb-3">
                    <label class="form-label">Date Range</label>
                    <select id="dateRangeFilter" class="form-select">
                        <option value="">All Time</option>
                        <option value="today">Today</option>
                        <option value="week">Last 7 Days</option>
                        <option value="month">Last 30 Days</option>
                        <option value="year">This Year</option>
                    </select>
                </div>
                <div class="col-md-4 mb-3">
                    <label class="form-label">Sort By</label>
                    <select id="sortFilter" class="form-select">
                        <option value="newest">Newest First</option>
                        <option value="oldest">Oldest First</option>
                    </select>
                </div>
            </div>
        </div>
    </div>

    <!-- Activity Logs Table -->
    <div class="card shadow mb-4 fade-in">
        <div class="card-header py-3 d-flex justify-content-between">
            <h6 class="m-0 font-weight-bold">Activity Log</h6>
            <span id="activityCount" class="badge bg-primary">@Model.Count</span>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table align-middle">
                    <thead>
                        <tr>
                            <th>Activity</th>
                            <th>Description</th>
                            <th>Date & Time</th>
                            <th>Company</th>
                        </tr>
                    </thead>
                    <tbody id="activityTableBody">
                        @foreach (var activity in Model)
                        {
                            <tr class="activity-row" data-type="@activity.ActivityType.ToLower()" data-description="@activity.Description.ToLower()" data-company="@(activity.CompanyName?.ToLower() ?? "")" data-date="@activity.Timestamp.ToString("yyyy-MM-dd")">
                                <td>
                                    <div class="d-flex align-items-center">
                                        @switch (activity.ActivityType)
                                        {
                                            case "CompanyRegistered":
                                                <i class="fas fa-building text-success me-2"></i>
                                                <span>Company Registered</span>
                                                break;
                                            case "CompanyDeleted":
                                                <i class="fas fa-trash text-danger me-2"></i>
                                                <span>Company Deleted</span>
                                                break;
                                            case "LicenseKeysGenerated":
                                                <i class="fas fa-key text-info me-2"></i>
                                                <span>License Keys Generated</span>
                                                break;
                                            case "LicenseKeyUpdated":
                                                <i class="fas fa-edit text-warning me-2"></i>
                                                <span>License Key Updated</span>
                                                break;
                                            case "LicenseKeyRevoked":
                                                <i class="fas fa-unlink text-danger me-2"></i>
                                                <span>License Key Revoked</span>
                                                break;
                                            case "LicenseKeyDeleted":
                                                <i class="fas fa-trash-alt text-danger me-2"></i>
                                                <span>License Key Deleted</span>
                                                break;
                                            default:
                                                <i class="fas fa-info-circle me-2"></i>
                                                <span>@activity.ActivityType</span>
                                                break;
                                        }
                                    </div>
                                </td>
                                <td>@activity.Description</td>
                                <td>@activity.Timestamp.ToString("MMM dd, yyyy hh:mm tt")</td>
                                <td>
                                    @if (activity.CompanyId.HasValue)
                                    {
                                        <a href="@Url.Action("CompanyDetails", "Owner", new { id = activity.CompanyId })">
                                            @activity.CompanyName
                                        </a>
                                    }
                                    else
                                    {
                                        <span class="">@(activity.CompanyName ?? "N/A")</span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <!-- No Results Message -->
            <div id="noActivityResults" class="text-center py-4 d-none">
                <i class="fas fa-search fa-2x mb-3 "></i>
                <h5>No activities found</h5>
                <p class="">Try adjusting your search or filter criteria</p>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const activityRows = document.querySelectorAll('.activity-row');
            const searchInput = document.getElementById('activitySearch');
            const typeFilter = document.getElementById('activityTypeFilter');
            const dateRangeFilter = document.getElementById('dateRangeFilter');
            const sortFilter = document.getElementById('sortFilter');
            const activityCount = document.getElementById('activityCount');
            
            // Function to filter activities
            function filterActivities() {
                const searchTerm = searchInput.value.toLowerCase().trim();
                const activityType = typeFilter.value.toLowerCase();
                const dateRange = dateRangeFilter.value;
                const sortOrder = sortFilter.value;
                
                let visibleCount = 0;
                let filteredRows = [];
                
                // Apply filters
                activityRows.forEach(row => {
                    const rowType = row.getAttribute('data-type');
                    const rowDescription = row.getAttribute('data-description');
                    const rowCompany = row.getAttribute('data-company');
                    const rowDate = new Date(row.getAttribute('data-date'));
                    
                    // Check if matches search term
                    const matchesSearch = rowType.includes(searchTerm) || 
                                         rowDescription.includes(searchTerm) || 
                                         rowCompany.includes(searchTerm);
                    
                    // Check if matches activity type
                    const matchesType = activityType === '' || rowType.includes(activityType.toLowerCase());
                    
                    // Check if matches date range
                    let matchesDate = true;
                    const today = new Date();
                    today.setHours(0, 0, 0, 0);
                    
                    if (dateRange === 'today') {
                        const todayDate = today.toISOString().split('T')[0];
                        matchesDate = row.getAttribute('data-date') === todayDate;
                    } else if (dateRange === 'week') {
                        const weekAgo = new Date(today);
                        weekAgo.setDate(weekAgo.getDate() - 7);
                        matchesDate = rowDate >= weekAgo;
                    } else if (dateRange === 'month') {
                        const monthAgo = new Date(today);
                        monthAgo.setDate(monthAgo.getDate() - 30);
                        matchesDate = rowDate >= monthAgo;
                    } else if (dateRange === 'year') {
                        const yearStart = new Date(today.getFullYear(), 0, 1);
                        matchesDate = rowDate >= yearStart;
                    }
                    
                    // Show/hide based on all filters
                    if (matchesSearch && matchesType && matchesDate) {
                        row.classList.remove('d-none');
                        visibleCount++;
                        filteredRows.push(row);
                    } else {
                        row.classList.add('d-none');
                    }
                });
                
                // Sort the visible rows
                const tbody = document.getElementById('activityTableBody');
                
                // Sort rows
                filteredRows.sort((a, b) => {
                    const dateA = new Date(a.getAttribute('data-date'));
                    const dateB = new Date(b.getAttribute('data-date'));
                    
                    if (sortOrder === 'newest') {
                        return dateB - dateA;
                    } else {
                        return dateA - dateB;
                    }
                });
                
                // Reorder rows in the DOM
                filteredRows.forEach(row => {
                    tbody.appendChild(row);
                });
                
                // Update activity count
                activityCount.textContent = visibleCount;
                
                // Show/hide no results message
                if (visibleCount === 0 && activityRows.length > 0) {
                    document.getElementById('noActivityResults').classList.remove('d-none');
                } else {
                    document.getElementById('noActivityResults').classList.add('d-none');
                }
            }
            
            // Add event listeners
            searchInput.addEventListener('input', filterActivities);
            typeFilter.addEventListener('change', filterActivities);
            dateRangeFilter.addEventListener('change', filterActivities);
            sortFilter.addEventListener('change', filterActivities);
        });
    </script>
} 