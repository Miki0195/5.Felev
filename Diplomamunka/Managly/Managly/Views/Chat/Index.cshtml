@{
    ViewData["Title"] = "Messages";
}

<link rel="stylesheet" href="~/css/Chat/Index.css">

<div id="toastContainer" class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1050;">
</div>

<input type="hidden" id="currentUserId" value="@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value" />

<div class="chat-container">
    <div class="search-area">
        <div class="search-header">
            <input type="text" id="searchInput" placeholder="Search users...">
            <button class="create-group-btn" onclick="openCreateGroupModal()">
                <i class="bi bi-people-fill"></i>
                <span>New Group</span>
            </button>
        </div>
        <div id="searchResults"></div>

        <div class="chat-tabs">
            <button class="tab-btn active" data-tab="direct">
                <i class="bi bi-chat-text"></i> Direct
            </button>
            <button class="tab-btn" data-tab="groups">
                <i class="bi bi-people"></i> Groups
            </button>
        </div>

        <div id="recentChats" class="tab-content active" data-tab="direct">
            <h3>Recent Chats</h3>
            <div id="recentChats"></div>
        </div>
        
        <div id="groupChats" class="tab-content" data-tab="groups">
            <!-- Group chats will be loaded here -->
        </div>
    </div>

    <div class="chat-area">
        <div id="chatHeader" class="chat-header">Select a user to start chatting</div>
        <div id="chatBox"></div>

        <div class="chat-input-container">
            <input type="text" id="messageInput" placeholder="Type a message">
            <button id="emojiButton" class="emoji-button">
                <i class="bi bi-emoji-smile"></i>
            </button>
            <div id="emojiPicker" class="emoji-picker-container" style="display: none;">
                <emoji-picker></emoji-picker>
            </div>
            <button id="sendMessageBtn">Send</button>
        </div>
    </div>
</div>

<div id="messageOptionsModal" class="modal fade" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Message Options</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="modalMessagePreview" class="text-muted"></p>
                <button class="btn btn-outline-danger w-100 my-2" id="deleteForMeBtn">Delete for Me</button>
                <button class="btn btn-danger w-100" id="deleteForEveryoneBtn">Delete for Everyone</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="createGroupModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create New Group</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="group-form">
                    <div class="form-group">
                        <label for="groupName">Group Name</label>
                        <input type="text" id="groupName" class="form-control" placeholder="Enter group name">
                    </div>
                    
                    <div class="form-group">
                        <label>Add Members</label>
                        <div class="search-members">
                            <input type="text" id="memberSearch" class="form-control" placeholder="Search users...">
                            <div id="memberSearchResults" class="member-search-results"></div>
                        </div>
                    </div>

                    <div class="selected-members">
                        <label>Selected Members</label>
                        <div id="selectedMembers" class="selected-members-list">
                            <!-- Selected members will appear here -->
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="createGroup()">Create Group</button>
            </div>
        </div>
    </div>
</div>

<!-- Add this new modal for group members -->
<div class="modal fade" id="groupMembersModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Group Members</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="groupMembersList" class="group-members-list">
                    <!-- Members will be listed here -->
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add this new modal for editing group name -->
<div class="modal fade" id="editGroupNameModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Group Name</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <input type="text" id="newGroupName" class="form-control" placeholder="Enter new group name">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveGroupName()">Save</button>
            </div>
        </div>
    </div>
</div>

<!-- Add Members Modal -->
<div class="modal fade" id="addGroupMembersModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Members</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="addMembersGroupId" />
                <div class="form-group">
                    <input type="text" class="form-control" placeholder="Search users..." 
                           oninput="searchNewMembers(event)" />
                </div>
                <div id="newMemberSearchResults" class="mt-3">
                    <!-- Search results will be populated here -->
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script src="~/js/site.js" asp-append-version="true"></script>

@*<script src="~/js/Chat/chat.js"></script>*@

<script type="module" src="https://cdn.jsdelivr.net/npm/emoji-picker-element@1.18.3/index.js"></script>

<script>
    let selectedUserId = null;
    let selectedMembers = new Set();
    let createGroupModal;
    let selectedGroupId = null;

    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    document.addEventListener("DOMContentLoaded", function () {
        loadRecentChats(); // Load direct messages by default

        const urlParams = new URLSearchParams(window.location.search);
        const userId = urlParams.get("userId");
        const messageInput = document.getElementById("messageInput");
        const sendMessageBtn = document.getElementById("sendMessageBtn");
        const emojiButton = document.getElementById('emojiButton');
        const emojiPicker = document.getElementById('emojiPicker');

        // Add tab switching functionality
        document.querySelectorAll('.tab-btn').forEach(button => {
            button.addEventListener('click', () => {
                // Remove active class from all buttons and content
                document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
                document.querySelectorAll('.tab-content').forEach(content => {
                    content.classList.remove('active');
                    content.style.display = 'none';
                });
                
                // Add active class to clicked button
                button.classList.add('active');
                
                // Show corresponding content
                const tabName = button.getAttribute('data-tab');
                const targetContent = tabName === 'direct' ? document.getElementById('recentChats') : document.getElementById('groupChats');
                targetContent.classList.add('active');
                targetContent.style.display = 'flex';
                
                if (tabName === 'direct') {
                    loadRecentChats(); // Refresh direct messages
                } else if (tabName === 'groups') {
                    loadGroupChats(); // Load group chats
                }
            });
        });

        // Trigger click on direct messages tab by default
        document.querySelector('.tab-btn[data-tab="direct"]').click();

        if (userId) {
            console.log(`✅ Opening chat with user: ${userId}`);
            selectedUserId = userId;
            loadMessages(userId);
            document.getElementById("chatBox").style.display = "block";
            messageInput.focus();
        }

        // Initialize the group modal
        createGroupModal = new bootstrap.Modal(document.getElementById('createGroupModal'));
        
        // Add member search functionality
        const memberSearch = document.getElementById('memberSearch');
        if (memberSearch) {
            memberSearch.addEventListener('input', debounce(searchMembers, 300));
        }

        // Send message function
        async function sendMessage() {
            const message = messageInput.value.trim();
            if (!message) return;

            if (selectedUserId) {
                // Existing direct message logic
                await sendDirectMessage(message);
            } else if (selectedGroupId) {
                // New group message logic
                await sendGroupMessage(message);
            }

            messageInput.value = '';
        }

        // Send button click event
        sendMessageBtn.addEventListener("click", sendMessage);

        // Enter key press event
        messageInput.addEventListener("keypress", function(event) {
            if (event.key === "Enter") {
                event.preventDefault();
                sendMessage();
            }
        });

        // Emoji picker functionality
        emojiButton.addEventListener('click', (e) => {
            e.stopPropagation();
            emojiPicker.style.display = emojiPicker.style.display === 'none' ? 'block' : 'none';
        });

        // Close emoji picker when clicking outside
        document.addEventListener('click', (e) => {
            if (!emojiButton.contains(e.target) && 
                !emojiPicker.contains(e.target)) {
                emojiPicker.style.display = 'none';
            }
        });

        // Handle emoji selection
        document.querySelector('emoji-picker')
            .addEventListener('emoji-click', event => {
                const cursor = messageInput.selectionStart;
                const text = messageInput.value;
                const insert = event.detail.unicode;
                
                messageInput.value = text.slice(0, cursor) + insert + text.slice(cursor);
                messageInput.setSelectionRange(cursor + insert.length, cursor + insert.length);
                messageInput.focus();
        });
    });

    document.getElementById("searchInput").addEventListener("input", function () {
        let query = this.value.trim(); 
        let resultsDiv = document.getElementById("searchResults");

        if (query.length === 0) {
            resultsDiv.innerHTML = "";
            return;
        }

        if (query.length > 2) {
            fetch(`/chat/search/${query}`)
                .then(response => response.json())
                .then(users => {
                    resultsDiv.innerHTML = ""; 

                    if (users.length === 0) {
                        resultsDiv.innerHTML = "<p>No users found</p>";
                        return;
                    }

                    users.forEach(user => {
                        let userDiv = document.createElement("div");
                        userDiv.textContent = user.fullName;
                        userDiv.classList.add("user-search-result");

                        userDiv.onclick = function () {
                            selectedUserId = user.id;
                            loadMessages(selectedUserId);
                            document.getElementById("chatBox").style.display = "block";
                            document.getElementById("messageInput").focus();
                            resultsDiv.innerHTML = ""; 
                        };

                        resultsDiv.appendChild(userDiv);
                    });
                })
                .catch(err => console.error("Search error: ", err));
        }
    });

    function loadMessages(userId) {
        fetch(`/chat/messages/${userId}`)
            .then(response => response.json())
            .then(messages => {
                let chatBox = document.getElementById("chatBox");
                chatBox.innerHTML = "";

                fetch(`/chat/user/${userId}`)
                    .then(response => response.json())
                    .then(user => {
                        document.getElementById("chatHeader").innerHTML = `
                            <img src="${user.profilePicturePath}" class="chat-header-img" alt="Profile">
                            <div class="user-info-container">
                                <span>${user.fullName}</span>
                                <div class="user-status-container">
                                    <span class="user-status-text">${user.isOnline ? 'Online' : 'Offline'}</span>
                                    <div class="online-status ${user.isOnline ? 'online' : 'offline'}"></div>
                                </div>
                            </div>
                        `;
                    })
                    .catch(err => console.error("Error fetching user details: ", err));

                let lastDate = null;
                let deletedMessages = JSON.parse(localStorage.getItem("deletedMessages")) || []; // ✅ Get deleted messages

                messages.forEach(msg => {
                    if (!msg.id) {
                        console.warn("⚠ Warning: Message without ID found, skipping.");
                        return;
                    }

                    if (deletedMessages.includes(msg.id.toString())) {
                        console.log(`⛔ Hiding deleted message ID: ${msg.id}`);
                        return; // ✅ Hide deleted messages only for the sender
                    }

                    let isSentByMe = msg.senderId === document.getElementById("currentUserId").value;
                    let messageDate = new Date(msg.timestamp);
                    let formattedDate = messageDate.toLocaleDateString("en-US", {
                        weekday: "short",
                        year: "numeric",
                        month: "short",
                        day: "numeric"
                    });

                    if (lastDate !== formattedDate) {
                        let dateSeparator = document.createElement("div");
                        dateSeparator.classList.add("date-separator");
                        dateSeparator.textContent = formattedDate;
                        chatBox.appendChild(dateSeparator);
                        lastDate = formattedDate;
                    }

                    let wrapper = document.createElement("div");
                    wrapper.classList.add("message-wrapper", isSentByMe ? "sent" : "received");
                    wrapper.setAttribute("data-message-id", msg.id);
                    wrapper.setAttribute("data-user-id", msg.senderId);

                    let messageDiv = document.createElement("div");
                    messageDiv.classList.add(isSentByMe ? "my-message" : "other-message");

                    if (msg.isDeleted) {
                        messageDiv.classList.add("deleted-message");
                        messageDiv.innerHTML = `<em>Deleted message</em>`; // ✅ Only for "Delete for Both"
                    } else {
                        messageDiv.textContent = msg.content;
                    }

                    let profileImg = document.createElement("img");
                    profileImg.src = msg.senderProfilePicture;
                    profileImg.classList.add("message-profile-img");

                    if (isSentByMe && !msg.isDeleted) {  // Only add click handler if message is not deleted
                        messageDiv.onclick = function () {
                            openMessageOptionsModal(msg.id, msg.content);
                        };
                    }

                    if (isSentByMe) {
                        wrapper.appendChild(messageDiv);
                        wrapper.appendChild(profileImg);
                    } else {
                        wrapper.appendChild(profileImg);
                        wrapper.appendChild(messageDiv);
                    }

                    chatBox.appendChild(wrapper);
                    chatBox.scrollTop = chatBox.scrollHeight;
                });
            })
            .catch(err => console.error("Load messages error: ", err));
    }

    connection.on("ReceiveMessage", function (senderId, message, messageId) {
        let chatBox = document.getElementById("chatBox");

        if (selectedUserId === senderId) {
            let isSentByMe = senderId === document.getElementById("currentUserId").value;
            let wrapper = document.createElement("div");
            wrapper.classList.add("message-wrapper", "received");
            wrapper.setAttribute("data-message-id", messageId);

            let messageDiv = document.createElement("div");
            messageDiv.classList.add("other-message");
            messageDiv.textContent = message;

            if (isSentByMe) {
                messageDiv.onclick = function () {
                    openMessageOptionsModal(messageId, message);
                };
            }

            fetch(`/chat/user/${senderId}`)
                .then(response => response.json())
                .then(user => {
                    let profileImg = document.createElement("img");
                    profileImg.src = user.profilePicturePath;
                    profileImg.classList.add("message-profile-img");

                    wrapper.appendChild(profileImg);
                    wrapper.appendChild(messageDiv);
                    chatBox.appendChild(wrapper);
                    chatBox.scrollTop = chatBox.scrollHeight;
                })
                .catch(err => console.error("Error fetching user details: ", err));

            fetch(`/chat/mark-as-read/${senderId}`, { method: "POST" }) 
                .then(() => {
                    let recentChat = document.querySelector(`.user-recent-chat[data-user-id="${senderId}"]`);
                    if (recentChat) {
                        recentChat.classList.remove("unread-message");
                        let badge = recentChat.querySelector(".unread-badge");
                        if (badge) badge.remove();
                    }
                })
                .catch(err => console.error("❌ Error marking messages as read: ", err));
        }

        updateRecentChat(senderId, message, false);
    });

    if (typeof connection !== "undefined") {
        connection.on("MessageDeleted", function (messageId) {

            applyDeletedMessageStyle(messageId);

            // ✅ Update recent chat preview for sender & receiver
            updateRecentChat(selectedUserId, "Deleted message", true);
        });
    }

    if (typeof connection !== "undefined") {
        connection.on("MessageDeletedForMe", function (messageId) {
            let messageElement = document.querySelector(`.message-wrapper[data-message-id="${messageId}"]`);
            if (messageElement) {
                messageElement.remove();

                // ✅ Store in LocalStorage so it stays deleted after reload
                let deletedMessages = JSON.parse(localStorage.getItem("deletedMessages")) || [];
                if (!deletedMessages.includes(messageId.toString())) {
                    deletedMessages.push(messageId.toString());
                    localStorage.setItem("deletedMessages", JSON.stringify(deletedMessages));
                }
            }
        });
    }

    function loadRecentChats() {
        fetch(`/chat/recent-chats`)
            .then(response => response.json())
            .then(users => {
                let recentChatsDiv = document.getElementById("recentChats");
                recentChatsDiv.innerHTML = "";


                if (users.length === 0) {
                    recentChatsDiv.innerHTML = "<p>No recent chats</p>";
                    return;
                }

                users.forEach(user => {
                    let userDiv = document.createElement("div");
                    userDiv.classList.add("user-recent-chat");
                    userDiv.setAttribute("data-user-id", user.id);

                    let profileImg = document.createElement("img");
                    profileImg.src = user.profilePicturePath;
                    profileImg.classList.add("recent-chat-img");

                    let nameDiv = document.createElement("div");
                    nameDiv.classList.add("user-name", "recent-chat-header");
                    nameDiv.innerHTML = `
                        <span>${user.fullName}</span>
                        <div class="status-dot ${user.isOnline ? 'online' : 'offline'}"></div>
                    `;

                    let messagePreviewDiv = document.createElement("div");
                    messagePreviewDiv.classList.add("message-preview");

                    if (user.lastMessage) {
                        if (user.lastMessage.isDeleted) {
                            // ✅ Ensure correct display for sender vs receiver
                            messagePreviewDiv.innerHTML = `<em>${user.lastMessage.isFromUser ? "You: Deleted message" : "Deleted message"}</em>`;
                        } else {
                            let messageText = user.lastMessage.isFromUser ? "You: " + user.lastMessage.content : user.lastMessage.content;
                            messagePreviewDiv.textContent = messageText.length > 30 ? messageText.substring(0, 27) + "..." : messageText;
                        }
                    } else {
                        messagePreviewDiv.textContent = "No messages yet";
                    }

                    let textWrapper = document.createElement("div");
                    textWrapper.classList.add("recent-chat-text");
                    textWrapper.appendChild(nameDiv);
                    textWrapper.appendChild(messagePreviewDiv);

                    if (user.unreadCount > 0 && selectedUserId !== user.id) {
                        userDiv.classList.add("unread-message");

                        let unreadBadge = document.createElement("span");
                        unreadBadge.classList.add("unread-badge");
                        unreadBadge.textContent = user.UnreadCount;
                        userDiv.appendChild(unreadBadge);
                    }

                    userDiv.appendChild(profileImg);
                    userDiv.appendChild(textWrapper);

                    userDiv.onclick = function () {
                        selectedUserId = user.id;
                        loadMessages(selectedUserId);
                        document.getElementById("chatBox").style.display = "block";
                        document.getElementById("messageInput").focus();

                        const newUrl = `/chat?userId=${selectedUserId}`;
                        history.pushState(null, "", newUrl);

                        fetch(`/chat/mark-as-read/${user.id}`, { method: "POST" })
                            .then(() => {
                                userDiv.classList.remove("unread-message");
                                let badge = userDiv.querySelector(".unread-badge");
                                if (badge) badge.remove();
                            });
                    };

                    recentChatsDiv.appendChild(userDiv);
                });
            })
            .catch(err => console.error("❌ Error loading recent chats:", err));
    }

    function updateRecentChat(userId, newMessage, isSentByMe) {
        let recentChatsDiv = document.getElementById("recentChats");
        let existingChat = document.querySelector(`.user-recent-chat[data-user-id="${userId}"]`);

        let messageText = isSentByMe ? `You: ${newMessage}` : newMessage;
        let truncatedMessage = messageText.length > 30 ? messageText.substring(0, 27) + "..." : messageText;

        if (existingChat) {
            let messagePreview = existingChat.querySelector(".message-preview");

            // ✅ Check if the last message in chat history is the one being deleted
            fetch(`/chat/messages/${userId}`)
                .then(response => response.json())
                .then(messages => {
                    if (messages.length > 0) {
                        let lastMessage = messages[messages.length - 1]; // Get last message

                        // ✅ Ensure correct formatting for sender & receiver
                        if (lastMessage.isDeleted) {
                            messagePreview.innerHTML = `<em>${lastMessage.senderId === document.getElementById("currentUserId").value ? "You: Deleted message" : "Deleted message"}</em>`;
                        } else {
                            messagePreview.textContent = truncatedMessage;
                        }
                    }
                })
                .catch(err => console.error("❌ Error checking last message:", err));

            if (selectedUserId === userId) {
                existingChat.classList.remove("unread-message");
                let badge = existingChat.querySelector(".unread-badge");
                if (badge) badge.remove();

                fetch(`/chat/mark-as-read/${userId}`, { method: "POST" }) // ✅ Mark as read in DB
                    .catch(err => console.error("❌ Error marking chat as read: ", err));
            } else {
                existingChat.classList.add("unread-message");

                let unreadBadge = existingChat.querySelector(".unread-badge");
                if (!unreadBadge) {
                    unreadBadge = document.createElement("span");
                    unreadBadge.classList.add("unread-badge");
                    unreadBadge.textContent = "●";
                    existingChat.appendChild(unreadBadge);
                }
            }

            recentChatsDiv.prepend(existingChat);
        } else {
            fetch(`/chat/user/${userId}`)
                .then(response => response.json())
                .then(user => {
                    let userDiv = document.createElement("div");
                    userDiv.classList.add("user-recent-chat");
                    userDiv.setAttribute("data-user-id", userId);

                    let profileImg = document.createElement("img");
                    profileImg.src = user.profilePicturePath;
                    profileImg.classList.add("recent-chat-img");

                    let nameDiv = document.createElement("div");
                    nameDiv.classList.add("user-name");
                    nameDiv.textContent = user.fullName;

                    let messagePreviewDiv = document.createElement("div");
                    messagePreviewDiv.classList.add("message-preview");

                    fetch(`/chat/messages/${userId}`)
                        .then(response => response.json())
                        .then(messages => {
                            if (messages.length > 0) {
                                let lastMessage = messages[messages.length - 1];

                                // ✅ Ensure correct formatting for sender & receiver
                                if (lastMessage.isDeleted) {
                                    messagePreviewDiv.innerHTML = `<em>${lastMessage.senderId === document.getElementById("currentUserId").value ? "You: Deleted message" : "Deleted message"}</em>`;
                                } else {
                                    messagePreviewDiv.textContent = truncatedMessage;
                                }
                            }
                        })
                        .catch(err => console.error("❌ Error checking last message:", err));

                    let textWrapper = document.createElement("div");
                    textWrapper.classList.add("recent-chat-text");
                    textWrapper.appendChild(nameDiv);
                    textWrapper.appendChild(messagePreviewDiv);

                    if (selectedUserId !== userId) {
                        userDiv.classList.add("unread-message");

                        let unreadBadge = document.createElement("span");
                        unreadBadge.classList.add("unread-badge");
                        unreadBadge.textContent = "●";
                        userDiv.appendChild(unreadBadge);
                    }

                    userDiv.appendChild(profileImg);
                    userDiv.appendChild(textWrapper);

                    userDiv.onclick = function () {
                        selectedUserId = userId;
                        loadMessages(selectedUserId);
                        document.getElementById("chatBox").style.display = "block";
                        document.getElementById("messageInput").focus();

                        fetch(`/chat/mark-as-read/${userId}`, { method: "POST" })
                            .then(() => {
                                userDiv.classList.remove("unread-message");
                                let badge = userDiv.querySelector(".unread-badge");
                                if (badge) badge.remove();
                            });
                    };

                    recentChatsDiv.prepend(userDiv);
                })
                .catch(err => console.error("❌ Error fetching user details:", err));
        }
    }

    function openMessageOptionsModal(messageId, messageText) {
        let modal = new bootstrap.Modal(document.getElementById("messageOptionsModal"));

        document.getElementById("modalMessagePreview").textContent = messageText;

        document.getElementById("deleteForMeBtn").onclick = function () {
            deleteMessageForMe(messageId);
            modal.hide();
        };

        document.getElementById("deleteForEveryoneBtn").onclick = function () {
            deleteMessageForEveryone(messageId);
            modal.hide();
        };

        modal.show();
    }

    function deleteMessageForMe(messageId) {
        console.error("deleteMessageForMe method called.");
        let userId = document.getElementById("currentUserId").value;
        let messageElement = document.querySelector(`.message-wrapper[data-message-id="${messageId}"]`);

        if (messageElement) {
            messageElement.remove();
            console.error("message removed");

            let deletedMessages = JSON.parse(localStorage.getItem("deletedMessages")) || [];
            if (!deletedMessages.includes(messageId.toString())) {
                deletedMessages.push(messageId.toString());
                localStorage.setItem("deletedMessages", JSON.stringify(deletedMessages));
            }

            fetch(`/chat/messages/delete-for-me/${messageId}`, { method: "POST" })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        console.error(`✅ Sending delete update to SignalR for message ${messageId}`);
                        console.error(messageId);
                        console.error(userId);
                        connection.invoke("MessageDeletedForMe", messageId, userId)
                            .then(response => {
                                console.error(`✅ SignalR Delete Response: ${response}`);
                            })
                            .catch(err => {
                                console.error("❌ Error sending delete update:", err);
                            });

                    } else {
                        console.error("❌ Server Error deleting for me:", result);
                    }
                })
                .catch(err => console.error("❌ Server error deleting for me: ", err));
        }
    }

    function deleteMessageForEveryone(messageId) {
        if (!messageId) {
            console.error("❌ Error: Message ID is undefined.");
            return;
        }

        fetch(`/chat/messages/delete/${messageId}`, { method: "DELETE" })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    let messageElement = document.querySelector(`.message-wrapper[data-message-id="${messageId}"]`);
                    if (messageElement) {
                        let messageDiv = messageElement.querySelector(".my-message, .other-message");
                        if (messageDiv) {
                            messageDiv.classList.add("deleted-message");
                            messageDiv.innerHTML = `<em>Deleted message</em>`;
                        }
                    }

                    applyDeletedMessageStyle(messageId);

                    connection.invoke("MessageDeleted", messageId)
                        .catch(err => console.error("❌ Error sending delete update:", err));

                    updateRecentChat(selectedUserId, "Deleted message", true);
                } else {
                    console.error("❌ Error deleting message on both ends:", result);
                }
            })
            .catch(err => console.error("❌ Server Error:", err));
    }

    connection.on("MessageDeleted", function (messageId) {
        applyDeletedMessageStyle(messageId);
    });

    function applyDeletedMessageStyle(messageId) {
        let messageElement = document.querySelector(`.message-wrapper[data-message-id="${messageId}"]`);
        if (messageElement) {
            let messageDiv = messageElement.querySelector(".my-message, .other-message");
            if (messageDiv) {
                messageDiv.classList.add("deleted-message");
                messageDiv.innerHTML = `<em>Deleted message</em>`;
            }
        }
    }

    connection.on("UserOnlineStatusChanged", function(userId, isOnline) {
        if (selectedUserId === userId) {
            // Update status indicator
            const statusIndicator = document.querySelector('.online-status');
            if (statusIndicator) {
                statusIndicator.className = `online-status ${isOnline ? 'online' : 'offline'}`;
            }
            
            // Update status text
            const statusText = document.querySelector('.user-status-text');
            if (statusText) {
                statusText.textContent = isOnline ? 'Online' : 'Offline';
            }
        }
        
        // Update status in recent chats if exists
        const recentChat = document.querySelector(`.user-recent-chat[data-user-id="${userId}"]`);
        if (recentChat) {
            const statusDot = recentChat.querySelector('.status-dot') || 
                document.createElement('div');
            statusDot.className = `status-dot ${isOnline ? 'online' : 'offline'}`;
            if (!recentChat.querySelector('.status-dot')) {
                recentChat.appendChild(statusDot);
            }
        }
    });

    function openCreateGroupModal() {
        selectedMembers.clear();
        document.getElementById('selectedMembers').innerHTML = '';
        document.getElementById('groupName').value = '';
        createGroupModal.show();
    }

    async function searchMembers(event) {
        const searchTerm = event.target.value.trim();
        const resultsContainer = document.getElementById('memberSearchResults');
        
        if (searchTerm.length < 2) {
            resultsContainer.classList.remove('active');
            return;
        }

        try {
            const response = await fetch(`/chat/search/${searchTerm}`);
            const users = await response.json();
            
            resultsContainer.innerHTML = '';
            users.forEach(user => {
                if (!selectedMembers.has(user.id)) {
                    const div = document.createElement('div');
                    div.className = 'user-search-result';
                    div.innerHTML = `
                        <img src="${user.profilePicturePath || '/images/default/default-profile.png'}" alt="${user.fullName}">
                        <span>${user.fullName}</span>
                    `;
                    div.onclick = () => addMember(user);
                    resultsContainer.appendChild(div);
                }
            });
            
            resultsContainer.classList.add('active');
        } catch (error) {
            console.error('Error searching members:', error);
        }
    }

    function addMember(user) {
        if (selectedMembers.has(user.id)) return;
        
        selectedMembers.add(user.id);
        const memberElement = document.createElement('div');
        memberElement.className = 'selected-member';
        memberElement.innerHTML = `
            <img src="${user.profilePicturePath || '/images/default/default-profile.png'}" alt="${user.fullName}">
            <span>${user.fullName}</span>
            <button class="remove-member" onclick="removeMember('${user.id}', this)">
                <i class="bi bi-x"></i>
            </button>
        `;
        
        document.getElementById('selectedMembers').appendChild(memberElement);
        document.getElementById('memberSearchResults').classList.remove('active');
        document.getElementById('memberSearch').value = '';
    }

    function removeMember(userId, button) {
        selectedMembers.delete(userId);
        button.closest('.selected-member').remove();
    }

    async function createGroup() {
        const groupName = document.getElementById('groupName').value.trim();
        
        if (!groupName) {
            showToast('Please enter a group name', 'error');
            return;
        }
        
        if (selectedMembers.size < 2) {
            showToast('Please add at least 2 members', 'error');
            return;
        }

        try {
            const response = await fetch('/chat/groups/create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    name: groupName,
                    members: Array.from(selectedMembers)
                })
            });

            const result = await response.json();
            
            if (result.success) {
                createGroupModal.hide();
                showToast('Group created successfully!', 'success');
                loadGroupChats();
            } else {
                showToast(result.message || 'Failed to create group', 'error');
            }
        } catch (error) {
            console.error('Error creating group:', error);
            showToast('Failed to create group', 'error');
        }
    }

    async function loadGroupChats() {
        try {
            const response = await fetch('/chat/groups');
            const groups = await response.json();
            
            const container = document.getElementById('groupChats');
            container.innerHTML = '<h3>Group Chats</h3>';
            
            const currentUserId = document.getElementById('currentUserId').value;
            
            groups.forEach(group => {
                const div = document.createElement('div');
                div.className = 'user-recent-chat';
                if (group.hasUnreadMessages) {
                    div.classList.add('unread-message');
                }
                div.setAttribute('data-group-id', group.id);

                const groupIcon = document.createElement('img');
                groupIcon.src = '/images/default/default-group.png';
                groupIcon.className = 'recent-chat-img';

                const textWrapper = document.createElement('div');
                textWrapper.className = 'recent-chat-text';

                const nameDiv = document.createElement('div');
                nameDiv.className = 'user-name group-name-container';
                
                // Add edit icon if user is the creator
                if (group.createdById === currentUserId) {
                    nameDiv.innerHTML = `
                        <span style="cursor: pointer;" onclick="openGroupChat(${group.id})">${group.name}</span>
                    `;
                } else {
                    nameDiv.innerHTML = `
                        <span style="cursor: pointer;" onclick="openGroupChat(${group.id})">${group.name}</span>
                    `;
                }

                const lastMessageDiv = document.createElement('div');
                lastMessageDiv.className = 'message-preview';

                if (group.lastMessage) {
                    if (group.lastMessageSenderId === currentUserId) {
                        lastMessageDiv.textContent = `You: ${group.lastMessage}`;
                    } else {
                        lastMessageDiv.textContent = group.lastMessage;
                    }
                } else {
                    lastMessageDiv.textContent = 'No messages yet';
                }

                textWrapper.appendChild(nameDiv);
                textWrapper.appendChild(lastMessageDiv);

                div.appendChild(groupIcon);
                div.appendChild(textWrapper);

                if (group.hasUnreadMessages) {
                    const unreadBadge = document.createElement('span');
                    unreadBadge.className = 'unread-badge';
                    unreadBadge.textContent = '●';
                    div.appendChild(unreadBadge);
                }

                div.onclick = () => openGroupChat(group.id);
                container.appendChild(div);
            });
        } catch (error) {
            console.error('Error loading group chats:', error);
        }
    }

    async function openGroupChat(groupId) {
        try {
            selectedGroupId = groupId;
            selectedUserId = null;
            
            await fetch(`/chat/groups/${groupId}/read`, { method: 'POST' });
            
            const groupChatItem = document.querySelector(`.user-recent-chat[data-group-id="${groupId}"]`);
            if (groupChatItem) {
                groupChatItem.classList.remove('unread-message');
                const badge = groupChatItem.querySelector('.unread-badge');
                if (badge) badge.remove();
            }

            const response = await fetch(`/chat/groups/${groupId}`);
            const groupData = await response.json();
            
            const currentUserId = document.getElementById('currentUserId').value;
            const isCreator = groupData.createdById === currentUserId;
            console.log(currentUserId);
            console.log(groupData.createdById);
            console.log(isCreator);
            
            document.getElementById('chatHeader').innerHTML = `
                <div class="group-chat-header">
                    ${isCreator ? 
                        `<h4 style="display: flex; align-items: center; gap: 10px;">
                            ${groupData.name}
                            <i class="bi bi-pencil-square edit-group-name" 
                               style="cursor: pointer; font-size: 0.8em;" 
                               onclick="openEditGroupName(event, ${groupId}, '${groupData.name}')"></i>
                        </h4>` : 
                        `<h4>${groupData.name}</h4>`
                    }
                    <small class="member-count" onclick="showGroupMembers(${groupId})">${groupData.memberCount} members</small>
                </div>
            `;
            
            const chatBox = document.getElementById('chatBox');
            chatBox.style.display = 'block';
            chatBox.innerHTML = '';
            
            let lastDate = null;

            if (groupData.messages) {
                for (const message of groupData.messages) {
                    const messageDate = new Date(message.timestamp);
                    const formattedDate = messageDate.toLocaleDateString("en-US", {
                        weekday: "short",
                        year: "numeric",
                        month: "short",
                        day: "numeric"
                    });

                    if (lastDate !== formattedDate) {
                        const dateSeparator = document.createElement("div");
                        dateSeparator.classList.add("date-separator");
                        dateSeparator.textContent = formattedDate;
                        chatBox.appendChild(dateSeparator);
                        lastDate = formattedDate;
                    }

                    const isCurrentUser = message.senderId === document.getElementById('currentUserId').value;
                    const wrapper = document.createElement('div');
                    wrapper.className = `message-wrapper ${isCurrentUser ? 'sent' : 'received'}`;
                    wrapper.setAttribute('data-message-id', message.id);

                    const messageContentWrapper = document.createElement('div');
                    messageContentWrapper.className = 'message-content-wrapper';

                    const messageContentInner = document.createElement('div');
                    messageContentInner.className = 'message-content-inner';

                    if (!isCurrentUser) {
                        const senderName = document.createElement('div');
                        senderName.className = 'message-sender-name';
                        senderName.textContent = message.senderName;
                        messageContentWrapper.appendChild(senderName);
                    }

                    const senderImg = document.createElement('img');
                    senderImg.src = message.senderProfilePicture || '/images/default/default-profile.png';
                    senderImg.className = 'message-profile-img';

                    const messageDiv = document.createElement('div');
                    messageDiv.className = isCurrentUser ? 'my-message' : 'other-message';

                    if (message.isDeleted) {
                        messageDiv.classList.add('deleted-message');
                        messageDiv.innerHTML = '<em>Deleted message</em>';
                    } else {
                        messageDiv.textContent = message.content;
                    }

                    if (isCurrentUser) {
                        messageContentInner.appendChild(messageDiv);
                        messageContentInner.appendChild(senderImg);
                    } else {
                        messageContentInner.appendChild(senderImg);
                        messageContentInner.appendChild(messageDiv);
                    }

                    messageContentWrapper.appendChild(messageContentInner);
                    wrapper.appendChild(messageContentWrapper);
                    chatBox.appendChild(wrapper);
                }
                chatBox.scrollTop = chatBox.scrollHeight;
            }
        } catch (error) {
            console.error('Error opening group chat:', error);
            showToast('Failed to load group chat', 'error');
        }
    }

    // Add this new function for sending group messages
    async function sendGroupMessage(content) {
        try {
            const response = await fetch('/chat/groups/message', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    groupId: selectedGroupId,
                    content: content
                })
            });

            if (!response.ok) {
                throw new Error('Failed to send message');
            }

            // Message will be added to the chat through SignalR
        } catch (error) {
            console.error('Error sending group message:', error);
            showToast('Failed to send message', 'error');
        }
    }

    // Add this to your existing SignalR connection.on handlers
    connection.on("ReceiveGroupMessage", async function (message) {
        const currentUserId = document.getElementById('currentUserId').value;
        
        if (message.senderId !== currentUserId && selectedGroupId !== message.groupId) {
            const groupChatItem = document.querySelector(`.user-recent-chat[data-group-id="${message.groupId}"]`);
            if (groupChatItem) {
                groupChatItem.classList.add('unread-message');
                
                if (!groupChatItem.querySelector('.unread-badge')) {
                    const unreadBadge = document.createElement('span');
                    unreadBadge.className = 'unread-badge';
                    unreadBadge.textContent = '●';
                    groupChatItem.appendChild(unreadBadge);
                }

                const messagePreview = groupChatItem.querySelector('.message-preview');
                if (messagePreview) {
                    messagePreview.textContent = message.content;
                }
            }
        }

        if (selectedGroupId === message.groupId) {
            const isCurrentUser = message.senderId === currentUserId;
            const wrapper = document.createElement('div');
            wrapper.className = `message-wrapper ${isCurrentUser ? 'sent' : 'received'}`;
            wrapper.setAttribute('data-message-id', message.messageId);

            const messageContentWrapper = document.createElement('div');
            messageContentWrapper.className = 'message-content-wrapper';

            const messageContentInner = document.createElement('div');
            messageContentInner.className = 'message-content-inner';

            const messageDiv = document.createElement('div');
            messageDiv.className = isCurrentUser ? 'my-message' : 'other-message';
            messageDiv.textContent = message.content;

            if (!isCurrentUser) {
                const senderName = document.createElement('div');
                senderName.className = 'message-sender-name';
                senderName.textContent = message.senderName;
                messageContentWrapper.appendChild(senderName);
            }

            // Fetch the sender's profile picture
            try {
                const userResponse = await fetch(`/chat/user/${message.senderId}`);
                const userData = await userResponse.json();
                
                const senderImg = document.createElement('img');
                senderImg.src = userData.profilePicturePath || '/images/default/default-profile.png';
                senderImg.className = 'message-profile-img';

                if (isCurrentUser) {
                    messageContentInner.appendChild(messageDiv);
                    messageContentInner.appendChild(senderImg);
                } else {
                    messageContentInner.appendChild(senderImg);
                    messageContentInner.appendChild(messageDiv);
                }

                messageContentWrapper.appendChild(messageContentInner);
                wrapper.appendChild(messageContentWrapper);
                document.getElementById('chatBox').appendChild(wrapper);
                scrollToBottom();
            } catch (error) {
                console.error('Error fetching user profile:', error);
            }
        }
    });

    // Add this function to handle direct messages
    async function sendDirectMessage(message) {
        const senderId = document.getElementById("currentUserId").value;

        if (!selectedUserId) {
            showToast("Select a user to chat with first!", "error");
            return;
        }

        try {
            const userResponse = await fetch(`/chat/user/${senderId}`);
            const user = await userResponse.json();

            let chatBox = document.getElementById("chatBox");
            let wrapper = document.createElement("div");
            wrapper.classList.add("message-wrapper", "sent");

            let messageContentWrapper = document.createElement('div');
            messageContentWrapper.className = 'message-content-wrapper';

            let messageContentInner = document.createElement('div');
            messageContentInner.className = 'message-content-inner';

            let messageDiv = document.createElement("div");
            messageDiv.classList.add("my-message");
            messageDiv.textContent = message;

            let profileImg = document.createElement("img");
            profileImg.src = user.profilePicturePath;
            profileImg.className = "message-profile-img";

            messageContentInner.appendChild(messageDiv);
            messageContentInner.appendChild(profileImg);
            messageContentWrapper.appendChild(messageContentInner);
            wrapper.appendChild(messageContentWrapper);
            chatBox.appendChild(wrapper);

            chatBox.scrollTop = chatBox.scrollHeight;

            const response = await fetch("/chat/messages", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ SenderId: senderId, ReceiverId: selectedUserId, Content: message })
            });

            const data = await response.json();
            
            if (!data.messageId) {
                console.error("❌ Error: Message ID is undefined.");
                return;
            }

            let sentMessageWrapper = document.querySelector(".message-wrapper.sent:last-child");
            let sentMessage = sentMessageWrapper.querySelector(".my-message");

            if (sentMessageWrapper && sentMessage) {
                sentMessageWrapper.setAttribute("data-message-id", data.messageId);
                sentMessage.onclick = function () {
                    openMessageOptionsModal(data.messageId, message);
                };
            }

            updateRecentChat(selectedUserId, message, true);
            connection.invoke("SendMessage", senderId, selectedUserId, message)
                .catch(err => console.error("❌ Error calling SendMessage:", err));

        } catch (err) {
            console.error("❌ Error saving message: ", err);
            showToast("Failed to send message", "error");
        }
    }

    // Add these new functions for handling group name editing and member list
    function openEditGroupName(event, groupId, currentName) {
        event.stopPropagation();
        const modal = new bootstrap.Modal(document.getElementById('editGroupNameModal'));
        document.getElementById('newGroupName').value = currentName;
        document.getElementById('newGroupName').setAttribute('data-group-id', groupId);
        modal.show();
    }

    async function saveGroupName() {
        const input = document.getElementById('newGroupName');
        const groupId = input.getAttribute('data-group-id');
        const newName = input.value.trim();
        
        if (!newName) {
            showToast('Group name cannot be empty', 'error');
            return;
        }
        
        try {
            const response = await fetch(`/chat/groups/${groupId}/name`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ name: newName })
            });
            
            if (response.ok) {
                const currentUserId = document.getElementById('currentUserId').value;
                bootstrap.Modal.getInstance(document.getElementById('editGroupNameModal')).hide();
                
                // Update group name in the list
                const groupItem = document.querySelector(`.user-recent-chat[data-group-id="${groupId}"]`);
                if (groupItem) {
                    const nameDiv = groupItem.querySelector('.user-name');
                    if (nameDiv) {
                        nameDiv.innerHTML = `
                            <span style="cursor: pointer;" onclick="openGroupChat(${groupId})">${newName}</span>
                            <i class="bi bi-pencil-square edit-group-name" onclick="openEditGroupName(event, ${groupId}, '${newName}')"></i>
                        `;
                    }
                }

                // Update group name in the chat header if it's open
                if (selectedGroupId === parseInt(groupId)) {
                    document.querySelector('.group-chat-header h4').innerHTML = `
                        ${newName}
                        <i class="bi bi-pencil-square edit-group-name" 
                           style="cursor: pointer; font-size: 0.8em; margin-left: 10px;" 
                           onclick="openEditGroupName(event, ${groupId}, '${newName}')"></i>
                    `;
                }
                
                showToast('Group name updated successfully', 'success');
            } else {
                showToast('Failed to update group name', 'error');
            }
        } catch (error) {
            console.error('Error updating group name:', error);
            showToast('Failed to update group name', 'error');
        }
    }

    async function showGroupMembers(groupId) {
        try {
            const response = await fetch(`/chat/groups/${groupId}`);
            const groupData = await response.json();
            
            const membersList = document.getElementById('groupMembersList');
            membersList.innerHTML = '';
            
            const currentUserId = document.getElementById('currentUserId').value;
            const isCreator = currentUserId === groupData.createdById;
            const isAdmin = groupData.currentUserRole.isAdmin;
            console.log(isAdmin);
            
            groupData.members.forEach(member => {
                const isGroupCreator = member.id === groupData.createdById;
                const isMemberAdmin = isGroupCreator || member.isAdmin;
                const canModifyAdmin = isCreator && !isGroupCreator;
                const canRemoveMember =
                    // First check if current user has permission to remove members
                    (isCreator || isAdmin) &&
                    // Cannot remove the group creator under any circumstances
                    !isGroupCreator &&
                    // Cannot remove yourself
                    member.id !== currentUserId &&
                    // Only creator can remove admins
                    (!member.isAdmin || isCreator);

                const memberDiv = document.createElement('div');
                memberDiv.className = 'group-member-item';
                memberDiv.innerHTML = `
                    <img src="${member.profilePicturePath || '/images/default/default-profile.png'}" alt="${member.fullName}">
                    <span>${member.fullName}</span>
                    ${isGroupCreator ? 
                        '<span class="admin-badge creator">Creator</span>' : 
                        (isMemberAdmin ? '<span class="admin-badge">Admin</span>' : '')}
                    <div class="member-actions">
                        ${canModifyAdmin ? 
                            `<button class="admin-toggle-btn" onclick="toggleAdminRole(event, ${groupId}, '${member.id}', ${isMemberAdmin})">
                                ${isMemberAdmin ? 'Remove Admin' : 'Make Admin'}
                            </button>` : 
                        ''}
                        ${(canRemoveMember) ? 
                            `<button class="remove-member-btn" onclick="removeMemberFromGroup(${groupId}, '${member.id}')">
                                <i class="bi bi-x-circle"></i>
                            </button>` : 
                            ''}
                    </div>
                `;
                membersList.appendChild(memberDiv);
            });

            // Add member management buttons for admin
            if (isCreator || isAdmin) {
                const managementDiv = document.createElement('div');
                managementDiv.className = 'member-management';
                managementDiv.innerHTML = `
                    <button class="btn btn-primary mt-3" onclick="openAddMembersModal(${groupId})">
                        <i class="bi bi-person-plus"></i> Add Members
                    </button>
                `;
                membersList.appendChild(managementDiv);
            }
            
            const modal = new bootstrap.Modal(document.getElementById('groupMembersModal'));
            modal.show();
        } catch (error) {
            console.error('Error loading group members:', error);
            showToast('Failed to load group members', 'error');
        }
    }

    async function toggleAdminRole(event, groupId, memberId, isCurrentlyAdmin) {
        event.stopPropagation();
        try {
            const response = await fetch(`/chat/groups/${groupId}/admins/${memberId}`, {
                method: isCurrentlyAdmin ? 'DELETE' : 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'include'
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Failed to update admin role');
            }
            
            showToast(`Successfully ${isCurrentlyAdmin ? 'removed' : 'added'} admin role`, 'success');
            
            // Update the UI immediately for the user performing the action
            const memberItem = event.target.closest('.group-member-item');
            if (memberItem) {
                // Toggle admin badge
                const existingBadge = memberItem.querySelector('.admin-badge:not(.creator)');
                if (!isCurrentlyAdmin) {
                    // Adding admin
                    if (!existingBadge) {
                        const badge = document.createElement('span');
                        badge.className = 'admin-badge';
                        badge.textContent = 'Admin';
                        const nameSpan = memberItem.querySelector('span');
                        nameSpan.insertAdjacentElement('afterend', badge);
                    }
                } else {
                    // Removing admin
                    if (existingBadge) {
                        existingBadge.remove();
                    }
                }
                
                // Update the button text and onclick handler
                const button = memberItem.querySelector('.admin-toggle-btn');
                if (button) {
                    button.textContent = isCurrentlyAdmin ? 'Make Admin' : 'Remove Admin';
                    button.onclick = (e) => toggleAdminRole(e, groupId, memberId, !isCurrentlyAdmin);
                }
            }
            
        } catch (error) {
            console.error('Error updating admin role:', error);
            showToast(error.message || 'Failed to update admin role', 'error');
        }
    }

    connection.on("AdminRoleUpdated", function(data) {
        const memberItem = document.querySelector(`.group-member-item:has([onclick*="${data.userId}"])`);
        if (memberItem) {
            // Handle admin badge
            const existingBadge = memberItem.querySelector('.admin-badge:not(.creator)');
            if (data.isAdmin) {
                if (!existingBadge) {
                    const badge = document.createElement('span');
                    badge.className = 'admin-badge';
                    badge.textContent = 'Admin';
                    const nameSpan = memberItem.querySelector('span');
                    nameSpan.insertAdjacentElement('afterend', badge);
                }
            } else {
                if (existingBadge) {
                    existingBadge.remove();
                }
            }

            // Handle admin toggle button
            const button = memberItem.querySelector('.admin-toggle-btn');
            if (button) {
                button.textContent = data.isAdmin ? 'Remove Admin' : 'Make Admin';
                button.onclick = (e) => toggleAdminRole(e, data.groupId, data.userId, data.isAdmin);
            }
        }
    });

    // Add new functions for member management
    async function removeMemberFromGroup(groupId, memberId) {
        if (!confirm('Are you sure you want to remove this member?')) return;
        
        try {
            const response = await fetch(`/chat/groups/${groupId}/members/${memberId}`, {
                method: 'DELETE'
            });
            
            if (response.ok) {
                showToast('Member removed successfully', 'success');
                
                // Properly close the modal and remove backdrop
                const modal = bootstrap.Modal.getInstance(document.getElementById('groupMembersModal'));
                modal.hide();
                
                // Remove modal backdrop if it exists
                const backdrop = document.querySelector('.modal-backdrop');
                if (backdrop) {
                    backdrop.remove();
                }
                
                // Remove modal-open class from body
                document.body.classList.remove('modal-open');
                document.body.style.overflow = '';
                document.body.style.paddingRight = '';
                
                // Reopen the modal with updated member list
                setTimeout(() => {
                    showGroupMembers(groupId);
                }, 100);
            } else {
                showToast('Failed to remove member', 'error');
            }
        } catch (error) {
            console.error('Error removing member:', error);
            showToast('Failed to remove member', 'error');
        }
    }

    function openAddMembersModal(groupId) {
        // Properly close the members modal
        const membersModal = bootstrap.Modal.getInstance(document.getElementById('groupMembersModal'));
        membersModal.hide();
        
        // Remove modal backdrop and cleanup
        const backdrop = document.querySelector('.modal-backdrop');
        if (backdrop) {
            backdrop.remove();
        }
        document.body.classList.remove('modal-open');
        document.body.style.overflow = '';
        document.body.style.paddingRight = '';
        
        // Show the add members modal after a short delay
        setTimeout(() => {
            const addMembersModal = new bootstrap.Modal(document.getElementById('addGroupMembersModal'));
            document.getElementById('addMembersGroupId').value = groupId;
            addMembersModal.show();
        }, 100);
    }

    // Add member search functionality for the add members modal
    async function searchNewMembers(event) {
        const searchTerm = event.target.value.trim();
        const resultsContainer = document.getElementById('newMemberSearchResults');
        
        if (searchTerm.length < 2) {
            resultsContainer.innerHTML = '';
            return;
        }

        try {
            const response = await fetch(`/chat/search/${searchTerm}`);
            const users = await response.json();
            
            resultsContainer.innerHTML = '';
            users.forEach(user => {
                const div = document.createElement('div');
                div.className = 'user-search-result';
                div.innerHTML = `
                    <img src="${user.profilePicturePath || '/images/default/default-profile.png'}" alt="${user.fullName}">
                    <span>${user.fullName}</span>
                    <button class="btn btn-sm btn-primary" onclick="addNewMemberToGroup('${user.id}', '${user.fullName}')">
                        Add
                    </button>
                `;
                resultsContainer.appendChild(div);
            });
        } catch (error) {
            console.error('Error searching users:', error);
        }
    }

    async function addNewMemberToGroup(userId, userName) {
        const groupId = document.getElementById('addMembersGroupId').value;
        
        try {
            const response = await fetch(`/chat/groups/${groupId}/members`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ userId })
            });
            
            if (response.ok) {
                showToast(`${userName} added to the group`, 'success');
                
                // Properly close the add members modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('addGroupMembersModal'));
                modal.hide();
                
                // Remove modal backdrop and cleanup
                const backdrop = document.querySelector('.modal-backdrop');
                if (backdrop) {
                    backdrop.remove();
                }
                document.body.classList.remove('modal-open');
                document.body.style.overflow = '';
                document.body.style.paddingRight = '';
                
                // Reopen the members modal with updated list
                setTimeout(() => {
                    showGroupMembers(groupId);
                }, 100);
            } else {
                showToast('Failed to add member', 'error');
            }
        } catch (error) {
            console.error('Error adding member:', error);
            showToast('Failed to add member', 'error');
        }
    }

    function showToast(message, type = 'info') {
        const toastContainer = document.getElementById('toastContainer');
        const toast = document.createElement('div');
        toast.className = `toast align-items-center text-white bg-${type === 'error' ? 'danger' : 'success'} border-0`;
        toast.setAttribute('role', 'alert');
        toast.setAttribute('aria-live', 'assertive');
        toast.setAttribute('aria-atomic', 'true');
        
        toast.innerHTML = `
            <div class="d-flex">
                <div class="toast-body">
                    ${message}
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        `;
        
        toastContainer.appendChild(toast);
        const bsToast = new bootstrap.Toast(toast);
        bsToast.show();
        
        toast.addEventListener('hidden.bs.toast', () => {
            toast.remove();
        });
    }

    function scrollToBottom() {
        const chatBox = document.getElementById('chatBox');
        chatBox.scrollTop = chatBox.scrollHeight;
    }

    // Add SignalR connection handler for group name updates
    connection.on("GroupNameUpdated", function(groupId, newName) {
        const groupItem = document.querySelector(`.user-recent-chat[data-group-id="${groupId}"]`);
        if (groupItem) {
            const nameDiv = groupItem.querySelector('.user-name');
            if (nameDiv) {
                const currentUserId = document.getElementById('currentUserId').value;
                const isCreator = groupItem.querySelector('.edit-group-name') !== null;
                
                if (isCreator) {
                    nameDiv.innerHTML = `
                        <span style="cursor: pointer;" onclick="openGroupChat(${groupId})">${newName}</span>
                        <i class="bi bi-pencil-square edit-group-name" onclick="openEditGroupName(event, ${groupId}, '${newName}')"></i>
                    `;
                } else {
                    nameDiv.textContent = newName;
                }
            }
        }

        if (selectedGroupId === groupId) {
            const headerTitle = document.querySelector('.group-chat-header h4');
            if (headerTitle) {
                headerTitle.textContent = newName;
            }
        }
    });

    // Add these new SignalR handlers after the existing connection.on handlers
    connection.on("GroupMemberRemoved", function(groupId, memberId) {
        // Update member count in group chat list
        const groupItem = document.querySelector(`.user-recent-chat[data-group-id="${groupId}"]`);
        if (groupItem) {
            const memberCountElement = groupItem.querySelector('.member-count');
            if (memberCountElement) {
                const currentCount = parseInt(memberCountElement.textContent);
                memberCountElement.textContent = `${currentCount - 1} members`;
            }
        }

        // Update member count in chat header if the group is currently open
        if (selectedGroupId === groupId) {
            const headerMemberCount = document.querySelector('.group-chat-header .member-count');
            if (headerMemberCount) {
                const currentCount = parseInt(headerMemberCount.textContent);
                headerMemberCount.textContent = `${currentCount - 1} members`;
            }
        }
    });

    connection.on("GroupMemberAdded", function(groupId, memberId) {
        // Update member count in group chat list
        const groupItem = document.querySelector(`.user-recent-chat[data-group-id="${groupId}"]`);
        if (groupItem) {
            const memberCountElement = groupItem.querySelector('.member-count');
            if (memberCountElement) {
                const currentCount = parseInt(memberCountElement.textContent);
                memberCountElement.textContent = `${currentCount + 1} members`;
            }
        }

        // Update member count in chat header if the group is currently open
        if (selectedGroupId === groupId) {
            const headerMemberCount = document.querySelector('.group-chat-header .member-count');
            if (headerMemberCount) {
                const currentCount = parseInt(headerMemberCount.textContent);
                headerMemberCount.textContent = `${currentCount + 1} members`;
            }
        }
    });
</script>