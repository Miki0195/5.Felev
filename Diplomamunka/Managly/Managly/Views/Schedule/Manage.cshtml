@model List<Managly.Models.User>
@{
    ViewData["Title"] = "Manage Schedule";
}

<link rel="stylesheet" href="~/css/Schedule/Manage.css">

<div class="container">
    <div class="page-header">
        <h1 class="page-title">Manage Worker Schedules</h1>
        <p class="page-subtitle">Schedule and manage shifts for your team members</p>
    </div>

    <!-- Search Section -->
    <div class="search-card p-4">
        <h5 class="mb-4">Search for a Worker</h5>
        <div class="search-container">
            <i class="fas fa-search search-icon"></i>
            <input type="text" 
                   id="workerSearch" 
                   class="form-control search-input" 
                   placeholder="Type a name to search..."
                   autocomplete="off">
            <div id="searchResults" class="search-results-container d-none">
                <!-- Search results will be populated here -->
            </div>
        </div>
    </div>

    <!-- Calendar Section -->
    <div id="scheduleContainer" class="mt-4 d-none">
        <div class="calendar-card p-4">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h5 class="mb-0">Schedule for <span id="workerName" class="text-primary"></span></h5>
                <button class="add-recurring-btn" data-bs-toggle="modal" data-bs-target="#recurringShiftModal">
                    <i class="fas fa-repeat"></i>
                    Add Recurring Shift
                </button>
            </div>
            <div id="calendar"></div>
        </div>
    </div>
</div>

<div id="toastContainer" class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1050;">
</div>


<div class="modal fade" id="timePickerModal" tabindex="-1" aria-labelledby="timePickerLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="timePickerLabel">Add Shift</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <label for="shiftStartTime">Start Time:</label>
                <input type="time" id="shiftStartTime" class="form-control">

                <label for="shiftEndTime" class="mt-2">End Time:</label>
                <input type="time" id="shiftEndTime" class="form-control">

                <label for="shiftComment" class="mt-2">Comment:</label>
                <textarea id="shiftComment" class="form-control" placeholder="Add any comments regarding this shift..."></textarea>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveShift">Save Shift</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete shift modal -->
<div class="modal fade" id="deleteShiftModal" tabindex="-1" aria-labelledby="deleteShiftLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteShiftLabel">Delete Shift</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>A shift already exists for this day. Do you want to delete it?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteShift">Delete</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Shift Modal -->
<div class="modal fade" id="editShiftModal" tabindex="-1" aria-labelledby="editShiftLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editShiftLabel">Edit Shift</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <label for="editShiftStartTime">Start Time:</label>
                <input type="time" id="editShiftStartTime" class="form-control">

                <label for="editShiftEndTime" class="mt-2">End Time:</label>
                <input type="time" id="editShiftEndTime" class="form-control">

                <label for="editShiftComment" class="mt-2">Comment:</label>
                <textarea id="editShiftComment" class="form-control" placeholder="Modify shift comments..."></textarea>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" id="saveEditShift">Save Changes</button>
            </div>
        </div>
    </div>
</div>

<!-- Cannot add shift modal -->
<div class="modal fade" id="cannotAddShiftModal" tabindex="-1" aria-labelledby="cannotAddShiftLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cannotAddShiftLabel">Shift Addition Not Allowed</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>This day already has an <strong>approved vacation</strong>. You cannot add a shift.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

<!-- Vacation Approval Modal -->
<div class="modal fade" id="approveRejectVacationModal" tabindex="-1" aria-labelledby="approveRejectVacationLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="approveRejectVacationLabel">Review Vacation Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>The employee has requested a vacation on <strong id="vacationDate"></strong>.</p>
                <p>Would you like to approve or reject this request?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" id="rejectVacationBtn">Reject</button>
                <button type="button" class="btn btn-success" id="approveVacationBtn">Approve</button>
            </div>
        </div>
    </div>
</div>

<!-- Update Vacation Modal -->
<div class="modal fade" id="updateVacationModal" tabindex="-1" aria-labelledby="updateVacationLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="updateVacationLabel">Manage Approved Vacation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Approved vacation on <strong id="vacationDateText"></strong>.</p>
                <p>Would you like to delete this approved vacation?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" id="deleteVacationBtn">Delete Vacation</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Cannot Add Past Shift Modal -->
<div class="modal fade" id="cannotAddPastShiftModal" tabindex="-1" aria-labelledby="cannotAddPastShiftLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cannotAddPastShiftLabel">Cannot Add Shift</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>You cannot add a shift to a <strong>past date</strong>. Please select a future date.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

<!-- Add this new modal for recurring shifts -->
<div class="modal fade" 
     id="recurringShiftModal" 
     tabindex="-1" 
     aria-labelledby="recurringShiftModalLabel" 
     aria-hidden="true"
     data-bs-keyboard="false">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Recurring Shift</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Shift Time</label>
                        <div class="d-flex gap-2">
                            <input type="time" class="form-control" id="recurringStartTime">
                            <span class="align-self-center">to</span>
                            <input type="time" class="form-control" id="recurringEndTime">
                        </div>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Date Range</label>
                        <div class="d-flex gap-2">
                            <input type="date" class="form-control" id="rangeStart">
                            <span class="align-self-center">to</span>
                            <input type="date" class="form-control" id="rangeEnd">
                        </div>
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-12">
                        <label class="form-label">Repeat on</label>
                        <div class="weekday-selector">
                            <div class="btn-group" role="group">
                                <input type="checkbox" class="btn-check" id="monday" autocomplete="off">
                                <label class="btn btn-outline-primary" for="monday">Mon</label>

                                <input type="checkbox" class="btn-check" id="tuesday" autocomplete="off">
                                <label class="btn btn-outline-primary" for="tuesday">Tue</label>

                                <input type="checkbox" class="btn-check" id="wednesday" autocomplete="off">
                                <label class="btn btn-outline-primary" for="wednesday">Wed</label>

                                <input type="checkbox" class="btn-check" id="thursday" autocomplete="off">
                                <label class="btn btn-outline-primary" for="thursday">Thu</label>

                                <input type="checkbox" class="btn-check" id="friday" autocomplete="off">
                                <label class="btn btn-outline-primary" for="friday">Fri</label>

                                <input type="checkbox" class="btn-check" id="saturday" autocomplete="off">
                                <label class="btn btn-outline-primary" for="saturday">Sat</label>

                                <input type="checkbox" class="btn-check" id="sunday" autocomplete="off">
                                <label class="btn btn-outline-primary" for="sunday">Sun</label>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label">Comment (optional)</label>
                    <textarea class="form-control" id="recurringComment" rows="2" placeholder="Add any comments for these shifts..."></textarea>
                </div>

                <div class="shift-preview mt-4">
                    <h6>Preview</h6>
                    <div id="previewDates" class="preview-dates">
                        <!-- Preview dates will be shown here -->
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveRecurringShifts">Save All Shifts</button>
            </div>
        </div>
    </div>
</div>

<link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>

<script>document.addEventListener("DOMContentLoaded", function () {
        loadNotifications();
        const workerSearch = document.getElementById("workerSearch");
        const searchResults = document.getElementById("searchResults");
        const scheduleContainer = document.getElementById("scheduleContainer");
        const workerName = document.getElementById("workerName");
        let selectedDate = null;
        let selectedWorkerId = null;
        let existingShiftId = null;
        let calendar = null;
        let debounceTimeout;

        // Handle search input
        workerSearch.addEventListener("input", function() {
            clearTimeout(debounceTimeout);
            const query = this.value.trim();

            if (query.length < 2) {
                searchResults.classList.add("d-none");
                return;
            }

            debounceTimeout = setTimeout(() => {
                fetch(`/api/schedule/search-workers?query=${encodeURIComponent(query)}`)
                    .then(response => response.json())
                    .then(workers => {
                        searchResults.innerHTML = "";
                        searchResults.classList.remove("d-none");

                        if (workers.length === 0) {
                            searchResults.innerHTML = `
                                <div class="no-results">
                                    No workers found
                                </div>`;
                            return;
                        }

                        workers.forEach(worker => {
                            const div = document.createElement("div");
                            div.className = "search-result-item";
                            div.textContent = `${worker.name} ${worker.lastName}`;
                            div.addEventListener("click", () => {
                                selectedWorkerId = worker.id;
                                workerName.textContent = `${worker.name} ${worker.lastName}`;
                                workerSearch.value = `${worker.name} ${worker.lastName}`;
                                searchResults.classList.add("d-none");
                                scheduleContainer.classList.remove("d-none");
                                loadSchedule(selectedWorkerId);
                            });
                            searchResults.appendChild(div);
                        });
                    })
                    .catch(error => console.error("Error searching workers:", error));
            }, 300); // Debounce delay
        });

        // Close search results when clicking outside
        document.addEventListener("click", function(e) {
            if (!workerSearch.contains(e.target) && !searchResults.contains(e.target)) {
                searchResults.classList.add("d-none");
            }
        });

        function loadSchedule(workerId) {
            var calendarEl = document.getElementById("calendar");

            if (calendar) {
                calendar.destroy();
            }

            calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: "dayGridMonth",
                editable: true,
                selectable: true,
                eventStartEditable: true, 
                droppable: true,
                headerToolbar: { 
                    left: "prev,next today",
                    center: "title",
                    right: "dayGridMonth,timeGridWeek,timeGridDay"
                },
                events: async function (fetchInfo, successCallback, failureCallback) {
                    try {
                        let scheduleResponse = await fetch(`/api/schedule/${workerId}`);
                        let leaveResponse = await fetch(`/api/leave/${workerId}`);

                        let scheduleEvents = await scheduleResponse.json();
                        let leaveEvents = await leaveResponse.json();

                        if (!Array.isArray(scheduleEvents) || !Array.isArray(leaveEvents)) {
                            throw new Error("Invalid API response format");
                        }

                        successCallback([...scheduleEvents, ...leaveEvents]);
                    } catch (error) {
                        console.error("Error fetching events:", error);
                        failureCallback(error);
                    }
                },
                eventDrop: function (info) {
                    let eventId = info.event.id;
                    let newDate = info.event.startStr; 
                    let today = new Date().toISOString().split("T")[0]; 
                    let isVacation = info.event.title.includes("Vacation");
                    let isPendingVacation = info.event.title.includes("Pending");
                    let isApprovedVacation = info.event.title.includes("Approved");

                    if (newDate < today) {
                        showToast("Cannot move events to a past date!", "error");
                        info.revert();
                        return;
                    }

                    if (isVacation && isPendingVacation) {
                        showToast("Pending vacations cannot be moved!", "error");
                        info.revert();
                        calendar.refetchEvents();
                        return;
                    }

                    Promise.all([
                        fetch(`/api/schedule/${selectedWorkerId}`).then(response => response.json()),
                        fetch(`/api/leave/${selectedWorkerId}`).then(response => response.json())
                    ])
                        .then(([scheduleEvents, leaveEvents]) => {
                            let shiftExists = scheduleEvents.find(event => event.start === newDate);
                            let vacationExists = leaveEvents.find(event => event.start === newDate && (event.color === "orange" || event.color === "green"));

                            if (isVacation && vacationExists) {
                                showToast("Cannot move vacation to a day that already has a vacation!", "error");
                                info.revert();
                                calendar.refetchEvents();
                                return;
                            }

                            if (!isVacation && (shiftExists || vacationExists)) {
                                showToast("A shift or vacation already exists on this date!", "error");
                                info.revert();
                                calendar.refetchEvents();
                                return;
                            }

                            let deleteShiftPromise = shiftExists
                                ? fetch(`/api/schedule/delete/${shiftExists.id}`, { method: "DELETE" }).then(res => res.json())
                                : Promise.resolve({ success: true });

                            deleteShiftPromise.then(shiftDeleteResult => {
                                if (!shiftDeleteResult.success) {
                                    showToast("Failed to remove conflicting shift.", "error");
                                    info.revert();
                                    calendar.refetchEvents();
                                    return;
                                }

                                if (isVacation) {
                                    fetch(`/api/leave/${eventId}/move`, {
                                        method: "PUT",
                                        headers: { "Content-Type": "application/json" },
                                        body: JSON.stringify(newDate) 
                                    })
                                        .then(response => {
                                            if (!response.ok) {
                                                throw new Error("Vacation move failed");
                                            }
                                            return response.json();
                                        })
                                        .then((data) => {
                                            if (data.success) {
                                                showToast("Vacation moved successfully!", "success");
                                                calendar.refetchEvents(); 
                                            } else {
                                                showToast("Failed to move vacation.", "error");
                                                info.revert();
                                                calendar.refetchEvents();
                                            }
                                        })
                                        .catch(error => {
                                            console.error("Error moving vacation:", error);
                                            showToast("Failed to move vacation.", "error");
                                            info.revert();
                                            calendar.refetchEvents();
                                        });
                                    return;
                                }

                                let shiftData = extractShiftDetails(info);

                                fetch(`/api/schedule/update/${eventId}`, {
                                    method: "PUT",
                                    headers: { "Content-Type": "application/json" },
                                    body: JSON.stringify(shiftData)
                                })
                                    .then(response => {
                                        if (!response.ok) {
                                            throw new Error("Shift move failed");
                                        }
                                        return response.json();
                                    })
                                    .then((data) => {
                                        if (data.success) {
                                            showToast("Shift moved successfully!", "success");
                                            calendar.refetchEvents();
                                        } else {
                                            showToast("Failed to move shift.", "error");
                                            info.revert();
                                            calendar.refetchEvents();
                                        }
                                    })
                                    .catch(error => {
                                        console.error("Error moving shift:", error);
                                        showToast("Failed to move shift.", "error");
                                        info.revert();
                                        calendar.refetchEvents();
                                    });

                            });

                        })
                        .catch(error => {
                            console.error("Error checking existing schedules:", error);
                            showToast("Failed to verify event move.", "error");
                            info.revert();
                            calendar.refetchEvents();
                        });
                },

                eventDidMount: function (info) {
                    let eventTitle = info.event.title;
                    let parts = eventTitle.split("\n");

                    let timeText = parts[0] || "";
                    let commentText = parts.length > 1 ? parts[1] : "";

                    if (info.el.querySelector(".event-content")) return;

                    let contentHtml = "";

                    if (eventTitle.includes("Vacation")) {
                        contentHtml = `<div class="event-content" style="color: white; font-weight: bold;">Vacation</div>`;
                    } else {
                        contentHtml = `<div class="event-content" style="color: white;"><strong>${timeText}</strong></div>
                                         <div class="event-content" style="font-size: 0.8rem; color: black">${commentText}</div>`;
                    }

                    info.el.innerHTML = contentHtml;
                },
                dateClick: function (info) {
                    let today = new Date().toISOString().split("T")[0];
                    selectedDate = info.dateStr;

                    Promise.all([
                        fetch(`/api/schedule/${selectedWorkerId}`).then(response => response.json()),
                        fetch(`/api/leave/${selectedWorkerId}`).then(response => response.json())
                    ])
                        .then(([scheduleEvents, leaveEvents]) => {
                            let shiftExists = scheduleEvents.find(event => event.start === selectedDate);
                            let approvedVacationExists = leaveEvents.find(event => event.start === selectedDate && event.color === "green");

                            if (approvedVacationExists) {
                                showCannotAddShiftModal();
                                return;
                            }

                            if (info.dateStr < today) {
                                if (shiftExists) {
                                    existingShiftId = shiftExists.id;
                                    showDeleteShiftModal();
                                } else {
                                    showCannotAddPastShiftModal();
                                }
                                return;
                            }

                            if (shiftExists) {
                                existingShiftId = shiftExists.id;
                                showDeleteShiftModal();
                            } else {
                                showTimePickerModal();
                            }
                        })
                        .catch(error => console.error("Error:", error));
                },
                eventClick: function (info) {
                    selectedShiftId = info.event.id;
                    let shiftParts = info.event.title.split("\n");
                    let shiftTime = shiftParts[0].split(" - ");
                    let eventTitle = info.event.title;

                    if (eventTitle.includes("Vacation") && eventTitle.includes("Approved")) {
                        selectedVacationId = info.event.id;
                        document.getElementById("vacationDateText").textContent = info.event.startStr;

                        updateVacationStatus();
                    }

                    if (!info.event.title.includes("Vacation")) {
                        document.getElementById("editShiftStartTime").value = shiftTime[0];
                        document.getElementById("editShiftEndTime").value = shiftTime[1];
                        document.getElementById("editShiftComment").value = shiftParts[1] || "";

                        showEditShiftModal();
                    } else {
                        let leaveId = info.event.id;
                        if (info.event.title.includes("Pending")) {
                            document.getElementById("vacationDate").textContent = info.event.startStr;
                            selectedVacationId = leaveId;

                            approveRejectVacationRequest();
                        }
                    }
                }


            });

            calendar.render();
        }

        function extractShiftDetails(info) {
            let shiftParts = info.event.title.split("\n");
            let shiftTime = shiftParts[0].split(" - "); 
            let comment = shiftParts.length > 1 ? shiftParts[1] : ""; 

            if (!shiftTime[0] || !shiftTime[1]) {
                showToast("Invalid shift time format.", "error");
                info.revert();
                return null;
            }

            return {
                shiftDate: info.event.startStr,
                startTime: shiftTime[0],
                endTime: shiftTime[1],
                comment: comment
            };
        }

        function checkExistingShift(workerId, date) {
            fetch(`/api/schedule/${workerId}`)
                .then(response => response.json())
                .then(events => {
                    let shiftExists = events.find(event => event.start === date);
                    if (shiftExists) {
                        existingShiftId = shiftExists.id;
                        showDeleteShiftModal();
                    } else {
                        showTimePickerModal();
                    }
                })
                .catch(error => console.error("Error:", error));
        }

        function updateLeaveStatus(leaveId, status) {
            fetch(`/api/leave/${leaveId}/status`, {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(status)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {

                        calendar.refetchEvents();

                        let modalElement = document.getElementById("approveRejectVacationModal");
                        let modalInstance = bootstrap.Modal.getInstance(modalElement);
                        if (modalInstance) {
                            modalInstance.hide(); 
                        }
                    } else {
                        alert("Failed to update leave status.");
                    }
                })
                .catch(error => console.error("Error:", error));
        }

        function showTimePickerModal() {
            let modal = new bootstrap.Modal(document.getElementById("timePickerModal"));
            modal.show();
        }

        function showEditShiftModal() {
            let modal = new bootstrap.Modal(document.getElementById("editShiftModal"));
            modal.show();
        }

        function showDeleteShiftModal() {
            let modal = new bootstrap.Modal(document.getElementById("deleteShiftModal"));
            modal.show();
        }

        function showCannotAddShiftModal() {
            let modal = new bootstrap.Modal(document.getElementById("cannotAddShiftModal"));
            modal.show();
        }

        function approveRejectVacationRequest() {
            let modal = new bootstrap.Modal(document.getElementById("approveRejectVacationModal"));
            modal.show();
        }

        function updateVacationStatus() {
            let modal = new bootstrap.Modal(document.getElementById("updateVacationModal"));
            modal.show();
        }

        function showCannotAddPastShiftModal() {
            let modal = new bootstrap.Modal(document.getElementById("cannotAddPastShiftModal"));
            modal.show();
        }

        document.getElementById("saveShift").addEventListener("click", function () {
            let startTime = document.getElementById("shiftStartTime").value;
            let endTime = document.getElementById("shiftEndTime").value;

            if (!startTime || !endTime) {
                alert("Please select both start and end times.");
                return;
            }

            saveShift(selectedWorkerId, selectedDate, startTime, endTime);
        });

        function saveShift(workerId, date, startTime, endTime) {
            let comment = document.getElementById("shiftComment").value;

            fetch("/api/schedule", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ userId: workerId, shiftDate: date, startTime: startTime, endTime: endTime, comment: comment })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        calendar.refetchEvents();
                        var modal = bootstrap.Modal.getInstance(document.getElementById("timePickerModal"));
                        modal.hide();
                    } else {
                        alert("Failed to add shift.");
                    }
                });
        }

        document.getElementById("saveEditShift").addEventListener("click", function () {
            let newStartTime = document.getElementById("editShiftStartTime").value;
            let newEndTime = document.getElementById("editShiftEndTime").value;
            let newComment = document.getElementById("editShiftComment").value;

            if (!newStartTime || !newEndTime) {
                alert("Please select both start and end times.");
                return;
            }
            let shiftEvent = calendar.getEventById(selectedShiftId);
            if (!shiftEvent) {
                alert("Error: Shift not found.");
                return;
            }

            let shiftDate = shiftEvent.startStr; 

            updateShift(selectedShiftId, newStartTime, newEndTime, shiftDate, newComment);
        });

        function updateShift(shiftId, startTime, endTime, shiftDate, comment) {
            fetch(`/api/schedule/update/${shiftId}`, {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ startTime: startTime, endTime: endTime, shiftDate : shiftDate, comment: comment })
            })
                .then(response => response.json())
                .then(() => {
                    calendar.refetchEvents();
                    var modal = bootstrap.Modal.getInstance(document.getElementById("editShiftModal"));
                    modal.hide();

                    showToast("Shift updated successfully!", "success");
                });
        }

        document.getElementById("confirmDeleteShift").addEventListener("click", function () {
            deleteShift(existingShiftId);
        });


        function deleteShift(shiftId) {
            fetch(`/api/schedule/delete/${shiftId}`, {
                method: "DELETE"
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        calendar.refetchEvents();
                        var modal = bootstrap.Modal.getInstance(document.getElementById("deleteShiftModal"));
                        modal.hide();
                    } else {
                        alert("Failed to delete shift.");
                    }
                })
                .catch(error => console.error("Error:", error));
        }

        document.getElementById("deleteVacationBtn").addEventListener("click", function () {
            deleteVacation(selectedVacationId);
        });

        function deleteVacation(vacationId) {
            fetch(`/api/leave/delete/${vacationId}`, {
                method: "DELETE"
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        calendar.refetchEvents();
                        let event = calendar.getEventById(vacationId);
                        if (event) {
                            event.remove();
                        }

                        var modal = bootstrap.Modal.getInstance(document.getElementById("updateVacationModal"));
                        modal.hide();
                    } else {
                        alert("Failed to delete vacation.");
                    }
                })
                .catch(error => console.error("Error:", error));
        }

        document.getElementById("approveVacationBtn").addEventListener("click", function () {
            updateLeaveStatus(selectedVacationId, "Approved");
        });

        document.getElementById("rejectVacationBtn").addEventListener("click", function () {
            updateLeaveStatus(selectedVacationId, "Rejected");
        });

        // Set default date range
        const today = new Date();
        const nextMonth = new Date(today);
        nextMonth.setMonth(today.getMonth() + 1);
        
        document.getElementById('rangeStart').valueAsDate = today;
        document.getElementById('rangeEnd').valueAsDate = nextMonth;

        // Update the preview function
        function updatePreview() {
            const startDate = new Date(document.getElementById('rangeStart').value);
            const endDate = new Date(document.getElementById('rangeEnd').value);
            const startTime = document.getElementById('recurringStartTime').value;
            const endTime = document.getElementById('recurringEndTime').value;
            const selectedDays = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday']
                .filter(day => document.getElementById(day).checked);

            const previewDates = document.getElementById('previewDates');
            previewDates.innerHTML = '';

            if (!startTime || !endTime || selectedDays.length === 0) {
                previewDates.innerHTML = '<div class="text-muted">Select time and days to see preview</div>';
                return;
            }

            let currentDate = new Date(startDate);
            let shiftsCount = 0;

            while (currentDate <= endDate && shiftsCount < 50) {
                // Get day name in correct format
                const dayName = currentDate.toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();
                if (selectedDays.includes(dayName)) {
                    const dateString = currentDate.toLocaleDateString('en-US', { 
                        weekday: 'short', 
                        month: 'short', 
                        day: 'numeric' 
                    });
                    previewDates.innerHTML += `
                        <div class="preview-date-item">
                            ${dateString} (${startTime} - ${endTime})
                        </div>`;
                    shiftsCount++;
                }
                currentDate.setDate(currentDate.getDate() + 1);
            }

            if (shiftsCount === 0) {
                previewDates.innerHTML = '<div class="text-muted">No shifts in selected range</div>';
            }
        }

        // Update the save recurring shifts handler
        document.getElementById('saveRecurringShifts').addEventListener('click', async function() {
            const startDate = new Date(document.getElementById('rangeStart').value);
            const endDate = new Date(document.getElementById('rangeEnd').value);
            const startTime = document.getElementById('recurringStartTime').value;
            const endTime = document.getElementById('recurringEndTime').value;
            const comment = document.getElementById('recurringComment').value;
            const selectedDays = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday']
                .filter(day => document.getElementById(day).checked);

            if (!startTime || !endTime || selectedDays.length === 0) {
                showToast('Please fill in all required fields', 'error');
                return;
            }

            const shifts = [];
            let currentDate = new Date(startDate);

            while (currentDate <= endDate) {
                // Get day name in correct format
                const dayName = currentDate.toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();
                if (selectedDays.includes(dayName)) {
                    shifts.push({
                        userId: selectedWorkerId,
                        shiftDate: currentDate.toISOString().split('T')[0],
                        startTime: startTime,
                        endTime: endTime,
                        comment: comment
                    });
                }
                currentDate.setDate(currentDate.getDate() + 1);
            }

            try {
                const response = await fetch('/api/schedule/bulk', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(shifts)
                });

                const result = await response.json();
                if (result.success) {
                    // Get and close the modal properly
                    const modal = document.getElementById('recurringShiftModal');
                    const bsModal = bootstrap.Modal.getInstance(modal);
                    bsModal.hide();
                    
                    // Remove all modal backdrops
                    document.querySelectorAll('.modal-backdrop').forEach(backdrop => {
                        backdrop.remove();
                    });
                    
                    // Reset body
                    document.body.classList.remove('modal-open');
                    document.body.style.overflow = '';
                    document.body.style.paddingRight = '';
                    
                    // Refresh calendar and show success message
                    calendar.refetchEvents();
                    showToast('Recurring shifts added successfully!', 'success');
                } else {
                    showToast('Failed to add recurring shifts', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showToast('An error occurred while adding shifts', 'error');
            }
        });

        // Add event listeners for preview updates
        ['rangeStart', 'rangeEnd', 'recurringStartTime', 'recurringEndTime'].forEach(id => {
            document.getElementById(id).addEventListener('change', updatePreview);
        });

        ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'].forEach(day => {
            document.getElementById(day).addEventListener('change', async function() {
                // Check for existing shifts/vacations before updating preview
                const startDate = new Date(document.getElementById('rangeStart').value);
                const endDate = new Date(document.getElementById('rangeEnd').value);
                const selectedDays = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday']
                    .filter(day => document.getElementById(day).checked);

                try {
                    const response = await fetch(`/api/schedule/${selectedWorkerId}/check-availability`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            startDate: startDate.toISOString().split('T')[0],
                            endDate: endDate.toISOString().split('T')[0],
                            selectedDays: selectedDays
                        })
                    });

                    const result = await response.json();
                    if (!result.available) {
                        this.checked = false;
                        showToast('Cannot add shifts on some selected days due to existing shifts or vacation requests', 'error');
                    }
                } catch (error) {
                    console.error('Error checking availability:', error);
                }

                updatePreview();
            });
        });

        // Add this function after your existing code
        function resetRecurringShiftModal() {
            // Reset time inputs
            document.getElementById('recurringStartTime').value = '';
            document.getElementById('recurringEndTime').value = '';
            
            // Reset date range to default (today to next month)
            const today = new Date();
            const nextMonth = new Date(today);
            nextMonth.setMonth(today.getMonth() + 1);
            
            document.getElementById('rangeStart').valueAsDate = today;
            document.getElementById('rangeEnd').valueAsDate = nextMonth;
            
            // Uncheck all weekday checkboxes
            ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'].forEach(day => {
                document.getElementById(day).checked = false;
            });
            
            // Clear comment
            document.getElementById('recurringComment').value = '';
            
            // Reset preview
            document.getElementById('previewDates').innerHTML = '<div class="text-muted">Select time and days to see preview</div>';
        }

        // Add event listener for modal open
        document.getElementById('recurringShiftModal').addEventListener('show.bs.modal', function () {
            resetRecurringShiftModal();
        });
    });</script>
