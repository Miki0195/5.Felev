@{
    ViewData["Title"] = "View Schedule";
}

<link rel="stylesheet" href="~/css/Schedule/Manage.css">
<link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>

<div class="container">
    <div class="form-header text-center">
        <div class="header-icon">
            <i class="bi bi-calendar2-event"></i>
        </div>
        <h1>View Schedule</h1>
        <p>View and manage your work schedule</p>
    </div>

    <!-- Vacation Selection Overlay -->
    <div class="vacation-selection-overlay d-none">
        <div class="vacation-selection-header">
            <div>
                <h6 class="mb-1">Select Vacation Dates</h6>
                <small class="text-muted">Click and drag to select multiple days</small>
            </div>
            <div class="d-flex gap-2">
                <button class="btn btn-outline-secondary btn-sm" id="cancelSelection">
                    <i class="fas fa-times"></i> Cancel
                </button>
                <button class="btn btn-success btn-sm" id="confirmSelection">
                    <i class="fas fa-check"></i> Confirm Selection
                </button>
            </div>
        </div>
    </div>

    <!-- Calendar Card -->
    <div class="calendar-card p-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h5 class="mb-0">Your Schedule</h5>
            <div class="d-flex align-items-center gap-3">
                <div class="legend d-flex gap-3 align-items-center">
                    <span class="d-flex align-items-center gap-2">
                        <i class="fas fa-info-circle"></i>
                        <small class="text-muted">Click on a day to view details</small>
                    </span>
                </div>
                <div class="d-flex gap-2">
                    <button id="editScheduleBtn" class="btn btn-warning">
                        <i class="fas fa-plus"></i> Request Vacation
                    </button>
                    <button id="doneEditingBtn" class="btn btn-success d-none">
                        <i class="fas fa-check"></i> Submit Request
                    </button>
                </div>
            </div>
        </div>
        <!-- Add this container for the selection counter -->
        <div id="selectionCounter" class="selection-counter d-none"></div>
        <div id="calendar"></div>
    </div>
</div>

<!-- Modal for viewing schedule details -->
<div class="modal fade" id="scheduleModal" tabindex="-1" aria-labelledby="scheduleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="scheduleModalLabel">Schedule Details</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="schedule-details">
                    <div class="mb-3">
                        <label class="text-muted d-block mb-1">Date</label>
                        <p id="scheduleDate" class="mb-0 fw-medium"></p>
                    </div>
                    <div class="mb-3">
                        <label class="text-muted d-block mb-1">Time</label>
                        <p id="scheduleTime" class="mb-0 fw-medium"></p>
                    </div>
                    <div>
                        <label class="text-muted d-block mb-1">Comment</label>
                        <p id="scheduleComment" class="mb-0 text-wrap"></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Vacation Exists Modal -->
<div class="modal fade" id="vacationExistsModal" tabindex="-1" aria-labelledby="vacationExistsModal" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="vacationExistsModal">Cannot Select This Date</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>You cannot select this date because you already have a <strong>pending or approved vacation</strong>.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

<!-- Shit Exists Modal -->
<div class="modal fade" id="shiftExistsModal" tabindex="-1" aria-labelledby="shiftExistsLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="shiftExistsLabel">Cannot Select This Date</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>You cannot select this date because a <strong>work shift</strong> already exists.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

<!-- Cannot Add Past Vacation Modal -->
<div class="modal fade" id="cannotAddPastVacationModal" tabindex="-1" aria-labelledby="cannotAddPastVacationLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cannotAddPastVacationLabel">Cannot Request Vacation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>You cannot request a vacation for a <strong>past date</strong>. Please select a future date.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

<script>document.addEventListener('DOMContentLoaded', function () {
        loadNotifications();
        let editMode = false;
        let selectedDates = [];
        const calendarEl = document.getElementById('calendar');
        const calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth',
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: ''
            },
            events: async function (fetchInfo, successCallback, failureCallback) {
                try {
                    let scheduleResponse = await fetch("/api/schedule/myschedule");
                    let leaveResponse = await fetch("/api/leave/myleaves");

                    let scheduleEvents = await scheduleResponse.json();
                    let leaveEvents = await leaveResponse.json();

                    console.log('Schedule Events:', scheduleEvents);
                    console.log('Leave Events:', leaveEvents);

                    if (!Array.isArray(scheduleEvents) || !Array.isArray(leaveEvents)) {
                        throw new Error("Invalid API response format");
                    }

                    successCallback([...scheduleEvents, ...leaveEvents]);
                } catch (error) {
                    console.error("Error fetching events:", error);
                    failureCallback(error);
                }
            },
            eventDidMount: function (info) {
                let eventTitle = info.event.title;
                let parts = eventTitle.split("\n");

                let timeText = parts[0] || "";
                let commentText = parts.length > 1 ? parts[1] : "";

                if (info.el.querySelector(".event-content")) return;

                if (eventTitle.includes("Vacation")) {
                    // Extract the status from the vacation title
                    const statusMatch = eventTitle.match(/\((.*?)\)/);
                    const status = statusMatch ? statusMatch[1].trim() : "";

                    // Remove the status from the title for display
                    timeText = timeText.replace(/\s*\(.*?\)/, "");

                    // Use the color from the backend
                    const color = info.event.backgroundColor || (status === "" ? "green" : "orange");
                    info.el.style.backgroundColor = color;
                    info.el.style.borderColor = color;

                    info.el.innerHTML = `
                    <div class="event-content">
                        <div style="color: white; margin-bottom: 4px;"><strong>${timeText}</strong></div>
                        <div style="font-size: 0.8rem; color: white; opacity: 0.9; border-top: 1px solid rgba(255,255,255,0.2); padding-top: 4px;">${status || 'Approved'}</div>
                    </div>
                `;
                } else {
                    info.el.style.backgroundColor = '#4299e1';
                    info.el.style.borderColor = '#2b6cb0';
                    info.el.innerHTML = `
                    <div class="event-content">
                        <div style="color: white; margin-bottom: 4px;"><strong>${timeText}</strong></div>
                        ${commentText ? `<div style="font-size: 0.8rem; color: white; opacity: 0.9; border-top: 1px solid rgba(255,255,255,0.2); padding-top: 4px;">${commentText}</div>` : ""}
                    </div>
                `;
                }

                // Add hover effect
                info.el.style.transition = 'all 0.2s ease';
                info.el.addEventListener('mouseenter', function () {
                    this.style.transform = 'scale(1.02)';
                    this.style.zIndex = '1';
                });
                info.el.addEventListener('mouseleave', function () {
                    this.style.transform = 'scale(1)';
                    this.style.zIndex = '';
                });
            },
            eventClick: function (info) {
                const event = info.event;
                const modal = new bootstrap.Modal(document.getElementById('scheduleModal'));

                const date = new Date(event.start);
                const formattedDate = date.toLocaleDateString('en-US', {
                    weekday: 'long',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });

                let eventTitle = info.event.title;
                let timeTextVacation = eventTitle;
                let statusTextVacation = "";
                let parts = eventTitle.split("\n");

                let timeText = parts[0] || "";
                let commentText = parts.length > 1 ? parts[1] : "";

                if (eventTitle.includes("Vacation")) {
                    // Extract status for vacation events
                    const statusMatch = eventTitle.match(/\((.*?)\)/);
                    if (statusMatch) {
                        statusTextVacation = statusMatch[1];
                        timeTextVacation = eventTitle.replace(/\s*\(.*?\)/, "");
                    } else {
                        // If there's no status in parentheses, it's approved
                        statusTextVacation = "Approved";
                        timeTextVacation = "Vacation";
                    }
                }

                document.getElementById('scheduleDate').textContent = formattedDate;
                document.getElementById('scheduleTime').textContent = timeText;
                document.getElementById('scheduleComment').textContent = statusTextVacation || commentText || 'No comment';

                modal.show();
            },
            selectable: true,
            selectMirror: true,
            unselectAuto: false,
            select: function (info) {
                if (!editMode) return;

                const clickedDate = info.startStr; // This will give us the exact clicked date
                const today = new Date();
                today.setHours(0, 0, 0, 0);

                if (new Date(clickedDate) < today) {
                    showCannotAddPastVacationModal();
                    calendar.unselect();
                    return;
                }

                // Check for existing events
                const events = calendar.getEvents();
                const existingEvent = events.find(event => event.startStr === clickedDate);

                if (existingEvent) {
                    if (existingEvent.title.includes("Vacation")) {
                        showVacationExistsModal();
                    } else {
                        showShiftExistsModal();
                    }
                    calendar.unselect();
                    return;
                }

                // Toggle selection
                const dayEl = document.querySelector(`.fc-day[data-date="${clickedDate}"]`);
                const existingIndex = selectedDates.indexOf(clickedDate);

                if (existingIndex === -1) {
                    // Add selection
                    selectedDates.push(clickedDate);
                    if (dayEl) {
                        dayEl.style.backgroundColor = 'rgba(246, 173, 85, 0.2)';
                        dayEl.style.position = 'relative';

                        const checkmark = document.createElement('div');
                        checkmark.innerHTML = '✓';
                        checkmark.style.position = 'absolute';
                        checkmark.style.top = '50%';
                        checkmark.style.left = '50%';
                        checkmark.style.transform = 'translate(-50%, -50%)';
                        checkmark.style.color = '#dd6b20';
                        checkmark.style.fontSize = '1.2rem';
                        checkmark.classList.add('vacation-checkmark');
                        dayEl.appendChild(checkmark);
                    }
                } else {
                    // Remove selection
                    selectedDates.splice(existingIndex, 1);
                    if (dayEl) {
                        dayEl.style.backgroundColor = '';
                        const checkmark = dayEl.querySelector('.vacation-checkmark');
                        if (checkmark) checkmark.remove();
                    }
                }

                updateSelectionCount();
                calendar.unselect();
            }
        });

        calendar.render();

        document.getElementById("editScheduleBtn").addEventListener("click", function () {
            // Clear any previous selections
            selectedDates = [];

            editMode = true;
            this.classList.add("d-none");
            document.getElementById("doneEditingBtn").classList.remove("d-none");

            // Update info text
            document.querySelector('.legend small').textContent = 'Click to select vacation dates';

            // Add visual cues for selectable dates
            const days = document.querySelectorAll('.fc-day:not(.fc-day-past)');
            days.forEach(day => {
                day.style.cursor = 'pointer';
                day.classList.add('selectable');
                // Clear any previous styling
                day.style.backgroundColor = '';
                const checkmark = day.querySelector('.vacation-checkmark');
                if (checkmark) checkmark.remove();
            });
        });

        document.getElementById("doneEditingBtn").addEventListener("click", function () {
            if (selectedDates.length === 0) {
                alert("Please select at least one day for your vacation request.");
                return;
            }

            editMode = false;
            this.classList.add("d-none");
            document.getElementById("editScheduleBtn").classList.remove("d-none");
            document.getElementById('selectionCounter').classList.add('d-none');

            // Reset info text
            document.querySelector('.legend small').textContent = 'Click on a day to view details';

            // Remove visual cues
            document.querySelectorAll('.fc-day').forEach(day => {
                day.style.cursor = '';
                day.classList.remove('selectable');
                day.style.backgroundColor = '';
                const checkmark = day.querySelector('.vacation-checkmark');
                if (checkmark) checkmark.remove();
            });

            submitLeaveRequest(selectedDates);
        });

        document.getElementById("cancelSelection").addEventListener("click", function () {
            const tooltip = document.querySelector('.vacation-tooltip');
            if (tooltip) tooltip.remove();

            editMode = false;
            selectedDates = [];
            document.getElementById("doneEditingBtn").classList.add("d-none");
            document.getElementById("editScheduleBtn").classList.remove("d-none");
            document.querySelector('.vacation-selection-overlay').classList.add('d-none');

            // Remove visual cues and selections
            document.querySelectorAll('.fc-day').forEach(day => {
                day.classList.remove('selectable', 'selected', 'selection-start', 'selection-end');
                day.style.backgroundColor = "";
            });
        });

        function submitLeaveRequest(selectedDates) {
            fetch("/api/leave/request", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(selectedDates.map(date => ({
                    LeaveDate: new Date(date).toISOString().split("T")[0],
                    Reason: "Vacation",
                    MedicalProof: ""
                })))
            }).then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Clear the orange background from selected dates
                        selectedDates.forEach(date => {
                            const dayEl = document.querySelector(`.fc-day[data-date="${date}"]`);
                            if (dayEl) {
                                dayEl.style.backgroundColor = "";
                                const checkmark = dayEl.querySelector('.vacation-checkmark');
                                if (checkmark) checkmark.remove();
                            }
                        });

                        // Clear the selection array
                        selectedDates = [];
                        // Hide the counter
                        document.getElementById('selectionCounter').classList.add('d-none');

                        calendar.refetchEvents();
                    } else {
                        alert("Failed to submit leave request.");
                    }
                }).catch(error => console.error("Error:", error));
        }

        function showVacationExistsModal() {
            let modal = new bootstrap.Modal(document.getElementById("vacationExistsModal"));
            modal.show();
        }

        function showShiftExistsModal() {
            let modal = new bootstrap.Modal(document.getElementById("shiftExistsModal"));
            modal.show();
        }

        function showCannotAddPastVacationModal() {
            let modal = new bootstrap.Modal(document.getElementById("cannotAddPastVacationModal"));
            modal.show();
        }

        function updateSelectionCount() {
            const counter = document.getElementById('selectionCounter');
            const count = selectedDates.length;

            if (count > 0) {
                counter.innerHTML = `
                <i class="fas fa-calendar-check"></i>
                ${count} day${count !== 1 ? 's' : ''} selected
            `;
                counter.classList.remove('d-none');
            } else {
                counter.classList.add('d-none');
            }
        }
    });</script>