@{
    ViewData["Title"] = "Video Conference";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css">

<div class="bg-gray-900 text-white h-screen flex">
    <div class="w-1/4 bg-gray-800 p-5 border-r border-gray-700 flex flex-col">
        <h2 class="text-xl font-semibold mb-4">Users</h2>
        <input type="text" id="searchUsers" class="w-full p-2 rounded-lg bg-gray-700 text-white placeholder-gray-400" placeholder="Search users...">
        <ul id="userResults" class="mt-4 space-y-3"></ul>
        <h4 class="mt-4 text-lg font-semibold">Selected Users</h4>
        <ul id="selectedUsers" class="space-y-2"></ul>
        @*hidden*@
        <button id="startCallBtn" class="bg-blue-500 text-white w-full py-2 rounded-lg mt-3">Start Call</button>
        @*hidden*@
        <div class="mt-4 text-yellow-400" id="waitingRoom">
            <h4 id="waitingRoomText"></h4>
        </div>
        <div class="mt-4 text-yellow-400" id="incomingCall" style="display: none;">
            <h3 id="callMessage"></h3>
            <button id="joinCallBtn" class="bg-blue-500 text-white w-full py-2 rounded-lg mt-3">Join Call</button>
        </div>
    </div>

    <!-- Video Call Section -->
    <div class="flex-1 flex flex-col items-center justify-center p-5 relative">
        <div class="relative w-3/4 h-3/4 bg-gray-800 rounded-lg flex items-center justify-center overflow-hidden">
            <video id="localVideo" class="absolute w-full h-full object-cover" autoplay playsinline muted></video>
            <video id="remoteVideo" class="absolute w-full h-full object-cover" autoplay playsinline></video>

            <!-- Small Self-View (Initially Hidden) -->
            <div id="localVideoSmall" class="absolute top-3 right-3 w-24 h-24 border-2 border-white rounded-lg overflow-hidden transition-all duration-500 opacity-0 scale-95 cursor-pointer">
                <video id="selfView" class="w-full h-full object-cover" autoplay playsinline muted></video>
            </div>

            <span id="noVideoText" class="text-gray-500">No active video feed</span>
        </div>

        <!-- Call Controls -->
        <div class="flex space-x-4 mt-4">
            <button id="endCallBtn" class="bg-red-500 px-6 py-2 rounded-lg text-white flex items-center"><i class="fas fa-phone-slash mr-2"></i>End Call</button>
            <button id="muteAudioBtn" class="bg-gray-700 px-6 py-2 rounded-lg text-white flex items-center"><i class="fas fa-microphone mr-2"></i>Mute</button>
            <button id="toggleVideoBtn" class="bg-gray-700 px-6 py-2 rounded-lg text-white flex items-center"><i class="fas fa-video mr-2"></i>Video</button>
        </div>
    </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/js/all.min.js"></script>

<script>const startCallBtn = document.getElementById("startCallBtn");
    const endCallBtn = document.getElementById("endCallBtn");
    const localVideo = document.getElementById("localVideo");
    const remoteVideo = document.getElementById("remoteVideo");

    let localStream;
    let peerConnection;
    let signalRConnection;
    let currentUserId = "USER_ID_FROM_SERVER";
    let targetUserId = null;

    const muteAudioBtn = document.getElementById("muteAudioBtn");
    const toggleVideoBtn = document.getElementById("toggleVideoBtn");
    let isMuted = false;
    let isVideoOff = false;

    const smallSelfView = document.getElementById("localVideoSmall");
    const selfViewVideo = document.getElementById("selfView");
    let isSwapped = false;

    muteAudioBtn.addEventListener("click", function () {
        if (localStream) {
            localStream.getAudioTracks()[0].enabled = isMuted;
            isMuted = !isMuted;
            this.classList.toggle("bg-red-500");
            this.innerHTML = this.classList.contains("bg-red-500") ? '<i class="fas fa-microphone-slash mr-2"></i>Unmute' : '<i class="fas fa-microphone mr-2"></i>Mute';
            //muteAudioBtn.innerHTML = isMuted ? '<i class="fas fa-microphone-slash"></i>' : '<i class="fas fa-microphone"></i>';
        }
    });

    toggleVideoBtn.addEventListener("click", function () {
        if (localStream) {
            localStream.getVideoTracks()[0].enabled = isVideoOff;
            isVideoOff = !isVideoOff;
            this.classList.toggle("bg-red-500");
            this.innerHTML = this.classList.contains("bg-red-500") ? '<i class="fas fa-video-slash mr-2"></i>Enable Video' : '<i class="fas fa-video mr-2"></i>Disable Video';
            //toggleVideoBtn.innerHTML = isVideoOff ? '<i class="fas fa-video-slash"></i>' : '<i class="fas fa-video"></i>';
        }
    });


    async function connectToSignalR() {
        signalRConnection = new signalR.HubConnectionBuilder()
            .withUrl("https://192.168.0.109:7221/videocallhub", {  // Ensure this matches backend CORS setup
                transport: signalR.HttpTransportType.WebSockets,
                skipNegotiation: true, // THESE TWO JUST FOR LOCAL TESTING
                withCredentials: false
            })
            .configureLogging(signalR.LogLevel.Information)
            .withAutomaticReconnect()
            .build();

        try {
            await signalRConnection.start();
            console.error("✅ SignalR connected successfully");
        } catch (error) {
            console.error("❌ SignalR connection failed:", error);
        }

        signalRConnection.on("ReceiveCallRequest", (callerId) => {
            console.error(`📩 Incoming call from ${callerId}`);
            targetUserId = callerId;
            document.getElementById("startCallBtn").innerText = "Accept Call";
        });


        signalRConnection.on("ReceiveSignal", async (senderId, signal) => {
            console.error(`📡 Signal received from ${senderId}`, signal);

            let parsedSignal;
            try {
                parsedSignal = JSON.parse(signal);
            } catch (error) {
                console.error("❌ Error parsing signal JSON:", error.message);
                return;
            }

            if (parsedSignal.type === "offer") {
                console.error("📡 Received offer. Sending answer...");
                await peerConnection.setRemoteDescription(new RTCSessionDescription(parsedSignal));

                const answer = await peerConnection.createAnswer();
                await peerConnection.setLocalDescription(answer);

                signalRConnection.invoke("SendSignal", senderId, JSON.stringify(answer));
            } else if (parsedSignal.type === "answer") {
                console.error("📡 Received answer. Setting remote description.");
                await peerConnection.setRemoteDescription(new RTCSessionDescription(parsedSignal));
            } else if (parsedSignal.type === "candidate") {
                console.error("📡 Adding ICE candidate:", parsedSignal.candidate);
                if (parsedSignal.candidate) {
                    await peerConnection.addIceCandidate(new RTCIceCandidate(parsedSignal.candidate));
                }
            }
        });
    }

    // ✅ Swapping Video Streams on Click
    smallSelfView.addEventListener("click", function () {
        console.log("🔄 Swapping video feeds...");

        if (!localStream || !remoteVideo.srcObject) {
            console.error("❌ Missing video streams, swap not possible.");
            return;
        }

        if (isSwapped) {
            // 🔄 Swap back to default: Small video -> Self, Big video -> Remote
            let tempStream = selfViewVideo.srcObject;
            selfViewVideo.srcObject = remoteVideo.srcObject;
            remoteVideo.srcObject = tempStream;

            console.log("📢 Reverted: Self view in small box, remote in big.");
        } else {
            // 🔄 Swap: Small video -> Remote, Big video -> Self
            let tempStream = selfViewVideo.srcObject;
            selfViewVideo.srcObject = remoteVideo.srcObject;
            remoteVideo.srcObject = tempStream;

            console.log("📢 Swapped: Remote view in small box, self in big.");
        }

        isSwapped = !isSwapped;
    });



    async function startCall() {
        if (!targetUserId || targetUserId === "TARGET_USER_ID_FROM_SERVER") {
            console.error("❌ Error: No target user for the call.");
            return;
        }

        console.error(`📞 Starting call with ${targetUserId}`);

        localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
        localVideo.srcObject = localStream;
        selfViewVideo.srcObject = localStream;

        //document.getElementById("selfView").srcObject = localStream;
        //document.getElementById("localVideoSmall").classList.remove = "hidden";

        peerConnection = new RTCPeerConnection({
            iceServers: [
                { urls: "stun:stun.l.google.com:19302" },
                { urls: "turn:openrelay.metered.ca:443", username: "openrelayproject", credential: "openrelayproject" }
            ]
        });

        localStream.getTracks().forEach(track => {
            console.log("🎥 Adding local track:", track.kind);
            peerConnection.addTrack(track, localStream);
        });

        peerConnection.ontrack = (event) => {
            console.log("📡 Received remote video stream.", event.streams[0]);

            if (!remoteVideo.srcObject || remoteVideo.srcObject.id !== event.streams[0].id) {
                remoteVideo.srcObject = event.streams[0];
            } else {
                console.warn("⚠️ Remote video already assigned.");
            }

            if (localStream) {
                selfViewVideo.srcObject = localStream;

                document.getElementById("waitingRoomText").innerHTML = "";
                smallSelfView.classList.remove("opacity-0", "scale-95", "hidden");
                smallSelfView.classList.add("opacity-100", "scale-100");
            }
        };

        peerConnection.onicecandidate = (event) => {
            if (event.candidate) {
                console.log("📡 Sending ICE candidate:", event.candidate);

                if (signalRConnection && signalRConnection.state === signalR.HubConnectionState.Connected) {
                    signalRConnection.invoke("SendSignal", targetUserId, JSON.stringify({
                        type: "candidate",
                        candidate: event.candidate
                    })).catch(err => console.error("❌ Failed to send ICE candidate:", err));
                } else {
                    console.error("❌ SignalR is not connected! ICE candidate not sent.");
                }
            }
        };



        if (signalRConnection) {
            const offer = await peerConnection.createOffer();
            await peerConnection.setLocalDescription(offer);

            signalRConnection.invoke("SendSignal", targetUserId, JSON.stringify(offer))
                .catch(err => console.error("❌ Failed to send WebRTC Offer:", err));
        } else {
            console.error("❌ Cannot send WebRTC offer because SignalR connection is undefined.");
        }
    }

    async function endCall() {
        console.error("📴 Ending call");
        peerConnection.close();
        localStream.getTracks().forEach(track => track.stop());
        localVideo.srcObject = null;
        remoteVideo.srcObject = null;

        // ✅ Hide self-view with smooth animation
        smallSelfView.classList.remove("opacity-100", "scale-100");
        smallSelfView.classList.add("opacity-0", "scale-95");
    }

    startCallBtn.addEventListener("click", startCall);
    endCallBtn.addEventListener("click", endCall);

    connectToSignalR();


    document.addEventListener("DOMContentLoaded", function () {
        let selectedUsers = [];

        checkForInvites();

        //document.getElementById("searchUsers").addEventListener("input", function () {
        //    let query = this.value.trim();
        //    if (query.length < 2) return;

        //    fetch(`/api/videoconference/search-users?query=${encodeURIComponent(query)}`)
        //        .then(response => {
        //            if (!response.ok) {
        //                return response.json().then(err => { throw new Error(err.error || "Unknown error"); });
        //            }
        //            return response.json();
        //        })
        //        .then(data => {
        //            let resultsList = document.getElementById("userResults");
        //            resultsList.innerHTML = "";

        //            if (!Array.isArray(data) || data.length === 0) {
        //                resultsList.innerHTML = `<li>No users found</li>`;
        //                return;
        //            }

        //            data.forEach(user => {
        //                if (!user.id || !user.fullName) return;

        //                let li = document.createElement("li");
        //                li.textContent = user.fullName;
        //                li.setAttribute("data-user-id", user.id);
        //                li.classList.add("user-result-item");
        //                li.addEventListener("click", function () {
        //                    addUserToCall(user.id, user.fullName);
        //                });
        //                resultsList.appendChild(li);
        //            });
        //        })
        //        .catch(error => {
        //            console.error("User search failed:", error);
        //            document.getElementById("userResults").innerHTML = `<li>Error: ${error.message}</li>`;
        //        });
        //});

        //function addUserToCall(userId, fullName) {
        //    if (!selectedUsers.some(u => u.id === userId)) {
        //        selectedUsers.push({ id: userId, name: fullName });

        //        let list = document.getElementById("selectedUsers");
        //        let li = document.createElement("li");
        //        li.textContent = fullName;
        //        li.setAttribute("data-user-id", userId);
        //        list.appendChild(li);
        //    }

        //    document.getElementById("startCallBtn").classList.remove("d-none");
        //}
        document.getElementById("searchUsers").addEventListener("input", function () {
            let query = this.value.trim();
            if (query.length < 2) return;

            fetch(`/api/videoconference/search-users?query=${encodeURIComponent(query)}`)
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(err => { throw new Error(err.error || "Unknown error"); });
                    }
                    return response.json();
                })
                .then(data => {
                    let resultsList = document.getElementById("userResults");
                    resultsList.innerHTML = "";

                    if (!Array.isArray(data) || data.length === 0) {
                        resultsList.innerHTML = `<li>No users found</li>`;
                        return;
                    }

                    data.forEach(user => {
                        if (!user.id || !user.fullName) return;

                        let li = document.createElement("li");
                        li.textContent = user.fullName;
                        li.setAttribute("data-user-id", user.id);
                        li.classList.add("user-result-item");
                        li.addEventListener("click", function () {
                            addUserToCall(user.id, user.fullName);
                        });
                        resultsList.appendChild(li);
                    });
                })
                .catch(error => {
                    console.error("User search failed:", error);
                    document.getElementById("userResults").innerHTML = `<li>Error: ${error.message}</li>`;
                });
        });

        function addUserToCall(userId, fullName) {
            if (!selectedUsers.some(u => u.id === userId)) {
                selectedUsers.push({ id: userId, name: fullName });

                let list = document.getElementById("selectedUsers");
                let li = document.createElement("li");
                li.textContent = fullName;
                li.setAttribute("data-user-id", userId);
                list.appendChild(li);
            }

            document.getElementById("startCallBtn").classList.remove("d-none");

            // ✅ Reset the search field and search results
            document.getElementById("searchUsers").value = "";
            document.getElementById("userResults").innerHTML = "";
        }

        document.getElementById("startCallBtn").addEventListener("click", function () {
            document.getElementById("waitingRoomText").innerHTML = "Waiting for the other user to accept...";

            selectedUsers.forEach(user => {
                if (!user.id) {
                    console.error("❌ Error: User ID is missing!", user);
                } else {
                    sendCallInvitation(user.id);
                }
            });
        });

        //function sendCallInvitation(userId) {
        //    if (!userId) {
        //        console.error("❌ Error: ReceiverId is undefined.");
        //        return;
        //    }

        //    targetUserId = userId;

        //    let requestBody = JSON.stringify({
        //        ReceiverId: userId
        //    });

        //    console.log("📩 Sending request:", requestBody);

        //    fetch("/api/videoconference/invite", {
        //        method: "POST",
        //        headers: { "Content-Type": "application/json" },
        //        body: requestBody
        //    })
        //        .then(async response => {
        //            let responseBody = await response.json();
        //            console.error("🟢 Server Response:", responseBody);

        //            if (!response.ok) {
        //                throw new Error(`Server Error: ${JSON.stringify(responseBody)}`);
        //            }

        //            document.getElementById("searchUsers").value = "";
        //            document.getElementById("userResults").innerHTML = "";
        //            document.getElementById("selectedUsers").innerHTML = "";
        //            document.getElementById("startCallBtn").classList.add("d-none");

        //            document.getElementById("waitingRoomText").innerHTML = "Waiting for the other user to accept..";

        //            startCall();
        //        })
        //        .catch(error => console.error("❌ Error:", error.message));
        //}

        function sendCallInvitation(userId) {
            if (!userId) {
                console.error("❌ Error: ReceiverId is undefined.");
                return;
            }

            targetUserId = userId;
            console.log(`📩 Sending call request to: ${userId}`);

            // ✅ First, invoke the SignalR hub method for real-time updates
            signalRConnection.invoke("SendCallRequest", userId)
                .then(() => {
                    console.log("✅ Call request sent successfully via SignalR.");
                })
                .catch(error => {
                    console.error("❌ SignalR call request failed. Falling back to API:", error);
                });

            // ✅ Then, send a backup request to the API to save the call invitation
            let requestBody = JSON.stringify({ ReceiverId: userId });

            fetch("/api/videoconference/invite", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: requestBody
            })
                .then(async response => {
                    let responseBody = await response.json();
                    console.log("🟢 Server Response (API):", responseBody);

                    if (!response.ok) {
                        throw new Error(`Server Error: ${JSON.stringify(responseBody)}`);
                    }

                    // ✅ Clear UI fields after sending the invitation
                    document.getElementById("searchUsers").value = "";
                    document.getElementById("userResults").innerHTML = "";
                    document.getElementById("selectedUsers").innerHTML = "";
                    document.getElementById("startCallBtn").classList.add("d-none");

                    document.getElementById("waitingRoomText").innerHTML = "Waiting for the other user to accept..";

                    startCall();
                })
                .catch(error => console.error("❌ API request failed:", error));
        }


        function checkForInvites() {
            fetch("/api/videoconference/check-invite")
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(errorData => {
                            throw new Error(`Server Error: ${JSON.stringify(errorData)}`);
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    console.log("📩 Invite Check Response:", data);

                    if (data.hasInvite) {
                        document.getElementById("incomingCall").style.display = "block";
                        document.getElementById("callMessage").innerText = `You have been invited to a video call by ${data.senderName}`;
                        document.getElementById("joinCallBtn").setAttribute("data-sender-id", data.senderId);
                    }
                })
                .catch(error => console.error("❌ Error checking for invites:", error.message));
        }

        document.getElementById("joinCallBtn").addEventListener("click", function () {
            let senderId = this.getAttribute("data-sender-id");

            fetch(`/api/videoconference/accept-invite/${senderId}`, { method: "POST" })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(err => { throw new Error(err.error || "Unexpected server error"); });
                    }
                    return response.json();
                })
                .then(data => {
                    console.error("✅ Call accepted. Starting video.");

                    if (data.success) {
                        targetUserId = senderId;

                        document.getElementById("incomingCall").style.display = "none";
                        document.getElementById("callMessage").innerText = "";
                        document.getElementById("joinCallBtn").style.display = "none";

                        startCall();
                    } else {
                        console.error("❌ Call was not accepted properly.");
                    }
                })
                .catch(error => console.error("❌ Error accepting invite:", error.message));
        });


    });</script> 