@{
    ViewData["Title"] = "Video Conference";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css">

<div id="toastContainer" class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1050;">
</div>

<div class="bg-gray-900 text-white min-h-screen flex">
    <!-- Left Sidebar -->
    <div class="w-1/4 bg-gray-800 p-5 border-r border-gray-700 flex flex-col h-full">
        <h2 class="text-xl font-semibold mb-4">Users</h2>
        <input type="text" id="searchUsers" class="w-full p-2 rounded-lg bg-gray-700 text-white placeholder-gray-400" placeholder="Search users...">
        <ul id="userResults" class="mt-4 space-y-3"></ul>
        <h4 class="mt-4 text-lg font-semibold">Selected Users</h4>
        <ul id="selectedUsers" class="space-y-2"></ul>
        @*hidden*@
        <button id="startCallBtn" class="bg-blue-500 text-white w-full py-2 rounded-lg mt-3">Start Call</button>

        <!-- Recent Calls -->
        <div class="mt-4">
            <h2 class="text-xl font-semibold mb-2">Recent Calls</h2>
            <ul id="recentCallsList" class="space-y-2 overflow-auto max-h-[250px]"></ul>
        </div>

        <!-- Waiting Room -->
        <div class="mt-4 text-yellow-400" id="waitingRoom">
            <h4 id="waitingRoomText"></h4>
        </div>

        <!-- Incoming Call -->
        <div class="mt-4 text-yellow-400" id="incomingCall" style="display: none;">
            <h3 id="callMessage"></h3>
            <button id="joinCallBtn" class="bg-blue-500 text-white w-full py-2 rounded-lg mt-3">Join Call</button>
        </div>
    </div>

    <!-- Main Video Call Area -->
    <div class="flex-1 flex flex-col items-center justify-center p-5 relative">
        <div class="relative w-3/4 h-3/4 bg-gray-800 rounded-lg flex items-center justify-center overflow-hidden">
            <video id="localVideo" class="absolute w-full h-full object-cover" autoplay playsinline muted></video>
            <video id="remoteVideo" class="absolute w-full h-full object-cover" autoplay playsinline></video>

            <div id="localVideoSmall" class="absolute top-3 right-3 w-24 h-24 border-2 border-white rounded-lg overflow-hidden transition-all duration-500 opacity-0 scale-95 cursor-pointer">
                <video id="selfView" class="w-full h-full object-cover" autoplay playsinline muted></video>
            </div>

            <span id="noVideoText" class="text-gray-500">No active video feed</span>
        </div>

        <div class="flex space-x-4 mt-4">
            <button id="endCallBtn" class="bg-red-500 px-6 py-2 rounded-lg text-white flex items-center"><i class="fas fa-phone-slash mr-2"></i>End Call</button>
            <button id="muteAudioBtn" class="bg-gray-700 px-6 py-2 rounded-lg text-white flex items-center"><i class="fas fa-microphone mr-2"></i>Mute</button>
            <button id="toggleVideoBtn" class="bg-gray-700 px-6 py-2 rounded-lg text-white flex items-center"><i class="fas fa-video mr-2"></i>Video</button>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/js/all.min.js"></script>

<script>const startCallBtn = document.getElementById("startCallBtn");
    const endCallBtn = document.getElementById("endCallBtn");
    const localVideo = document.getElementById("localVideo");
    const remoteVideo = document.getElementById("remoteVideo");

    let localStream;
    let peerConnection;
    let signalRConnection;
    let currentUserId = "USER_ID_FROM_SERVER";
    let targetUserId = null;
    let callId = null;
    selectedUsers = [];

    const muteAudioBtn = document.getElementById("muteAudioBtn");
    const toggleVideoBtn = document.getElementById("toggleVideoBtn");
    let isMuted = false;
    let isVideoOff = false;

    const smallSelfView = document.getElementById("localVideoSmall");
    const selfViewVideo = document.getElementById("selfView");
    let isSwapped = false;

    let missedCallTimer;

    muteAudioBtn.addEventListener("click", function () {
        if (localStream) {
            localStream.getAudioTracks()[0].enabled = isMuted;
            isMuted = !isMuted;
            this.classList.toggle("bg-red-500");
            this.innerHTML = this.classList.contains("bg-red-500") ? '<i class="fas fa-microphone-slash mr-2"></i>Unmute' : '<i class="fas fa-microphone mr-2"></i>Mute';
        }
    });

    toggleVideoBtn.addEventListener("click", function () {
        if (localStream) {
            localStream.getVideoTracks()[0].enabled = isVideoOff;
            isVideoOff = !isVideoOff;
            this.classList.toggle("bg-red-500");
            this.innerHTML = this.classList.contains("bg-red-500") ? '<i class="fas fa-video-slash mr-2"></i>Enable Video' : '<i class="fas fa-video mr-2"></i>Disable Video';
        }
    });


    async function connectToSignalR() {
        signalRConnection = new signalR.HubConnectionBuilder()
            //.withUrl("https://192.168.1.193:7221/videocallhub", {  // Ensure this matches backend CORS setup
            //    transport: signalR.HttpTransportType.WebSockets,
            //    skipNegotiation: true, // THESE TWO JUST FOR LOCAL TESTING
            //    withCredentials: false
            //})
            .withUrl("https://192.168.0.134:7221/videocallhub")
            .configureLogging(signalR.LogLevel.Information)
            .withAutomaticReconnect()
            .build();

        try {
            await signalRConnection.start();
            console.error("✅ SignalR connected successfully");
        } catch (error) {
            console.error("❌ SignalR connection failed:", error);
        }

        signalRConnection.off("ReceiveCallRequest");
        signalRConnection.off("ReceiveSignal");
        signalRConnection.off("CallEnded");

        signalRConnection.on("ReceiveCallRequest", (callerId, callerName, receivedCallId) => {
            targetUserId = callerId;
            callId = receivedCallId;

            document.getElementById("incomingCall").style.display = "block";
            document.getElementById("callMessage").innerText = `You have been invited to a video call by ${callerName}`;
            document.getElementById("joinCallBtn").setAttribute("data-sender-id", callerId);
        });

        signalRConnection.on("ReceiveSignal", async (senderId, signal) => {
            console.error(`📡 Signal received from ${senderId}`, signal);

            let parsedSignal;
            try {
                parsedSignal = JSON.parse(signal);
            } catch (error) {
                console.error("❌ Error parsing signal JSON:", error.message);
                return;
            }

            if (!peerConnection) {
                console.warn("⚠️ PeerConnection is not initialized yet. Delaying ICE candidate processing.");
                return;
            }

            if (parsedSignal.type === "offer") {
                await peerConnection.setRemoteDescription(new RTCSessionDescription(parsedSignal));

                const answer = await peerConnection.createAnswer();
                await peerConnection.setLocalDescription(answer);

                signalRConnection.invoke("SendSignal", senderId, JSON.stringify(answer));
            } else if (parsedSignal.type === "answer") {
                await peerConnection.setRemoteDescription(new RTCSessionDescription(parsedSignal));
            } else if (parsedSignal.type === "candidate") {
                if (peerConnection) {
                    await peerConnection.addIceCandidate(new RTCIceCandidate(parsedSignal.candidate));
                } else {
                    console.warn("⚠️ Skipping ICE candidate. PeerConnection is not ready.");
                }
            }
        });

        signalRConnection.on("CallEnded", (endedCallId, duration) => {
            if (callId === endedCallId) {
                localStorage.removeItem("activeCall");
                let statusElement = document.getElementById("noVideoText");
                if (statusElement) {
                    statusElement.innerHTML = `<p class="text-red-500 font-bold text-xl">Call Ended</p>
                                       <p class="text-white text-lg">Duration: ${duration}</p>`;

                    setTimeout(() => {
                        statusElement.innerHTML = `<p class="text-gray-500">No active video feed</p>`;
                    }, 5000);
                } else {
                    console.warn("⚠️ callStatus element not found.");
                }

                cleanupCallUI();
            }
        });

    }

    //smallSelfView.addEventListener("click", function () {
    //    console.log("🔄 Attempting to swap video feeds...");
    //    console.log("🎥 Local Video Stream:", localVideo.srcObject);
    //    console.log("🎥 Remote Video Stream:", remoteVideo.srcObject);
    //    console.log("🎥 Self View Video Stream:", selfViewVideo.srcObject);

    //    // Ensure that both local and remote video elements have valid streams before swapping
    //    if (!localVideo.srcObject || !remoteVideo.srcObject || !selfViewVideo.srcObject) {
    //        console.error("❌ Missing video streams, swap not possible.");
    //        return;
    //    }

    //    if (isSwapped) {
    //        // Swap back to original positions
    //        selfViewVideo.srcObject = localStream;  // ✅ Fix: Restore local video properly
    //        remoteVideo.srcObject = remoteStream;

    //        remoteVideo.muted = false;
    //        selfViewVideo.muted = true;
    //    } else {
    //        // Swap self-view with main remote video
    //        let tempStream = selfViewVideo.srcObject;
    //        selfViewVideo.srcObject = remoteVideo.srcObject;
    //        remoteVideo.srcObject = tempStream;

    //        remoteVideo.muted = true;
    //        selfViewVideo.muted = false;
    //    }

    //    console.log("✅ Swap complete!");
    //    console.log("🎥 Self View Video Stream (After Swap):", selfViewVideo.srcObject);
    //    console.log("🎥 Remote Video Stream (After Swap):", remoteVideo.srcObject);

    //    isSwapped = !isSwapped;
    //});
    smallSelfView.addEventListener("click", function () {
        if (!localStream || !remoteVideo.srcObject) {
            console.error("❌ Missing video streams, swap not possible.");
            return;
        }

        if (isSwapped) {
            let tempStream = selfViewVideo.srcObject;
            selfViewVideo.srcObject = remoteVideo.srcObject;
            remoteVideo.srcObject = tempStream;

            remoteVideo.muted = false;
            selfViewVideo.muted = true;
        } else {
            let tempStream = selfViewVideo.srcObject;
            selfViewVideo.srcObject = remoteVideo.srcObject;
            remoteVideo.srcObject = tempStream;

            remoteVideo.muted = true;
            selfViewVideo.muted = false;
        }

        isSwapped = !isSwapped;
    });



    //async function startCall() {
    //    if (!targetUserId || targetUserId === "TARGET_USER_ID_FROM_SERVER") {
    //        showToast("No target user for the call.", "danger");
    //        return;
    //    }

    //    if (peerConnection) {
    //        peerConnection.onicecandidate = null;
    //        peerConnection.ontrack = null;
    //        peerConnection.close();
    //        peerConnection = null;
    //    }

    //    if (localStream) {
    //        localStream.getTracks().forEach(track => track.stop());
    //        localStream = null;
    //    }

    //    localVideo.srcObject = null;
    //    remoteVideo.srcObject = null;

    //    try {
    //        localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
    //        localVideo.srcObject = localStream;
    //        selfViewVideo.srcObject = localStream;
    //    } catch (error) {
    //        console.error("❌ Failed to access camera/microphone:", error);
    //        return;
    //    }

    //    peerConnection = new RTCPeerConnection({
    //        iceServers: [
    //            { urls: "stun:stun.l.google.com:19302" },
    //            { urls: "turn:openrelay.metered.ca:443", username: "openrelayproject", credential: "openrelayproject" }
    //        ]
    //    });

    //    localStream.getTracks().forEach(track => {
    //        peerConnection.addTrack(track, localStream);
    //    });

    //    peerConnection.ontrack = (event) => {
    //        remoteVideo.srcObject = event.streams[0];

    //        smallSelfView.classList.remove("opacity-0", "scale-95", "hidden");
    //        smallSelfView.classList.add("opacity-100", "scale-100");
    //    };

    //    peerConnection.onicecandidate = (event) => {
    //        if (event.candidate) {

    //            if (signalRConnection && signalRConnection.state === signalR.HubConnectionState.Connected) {
    //                signalRConnection.invoke("SendSignal", targetUserId, JSON.stringify({
    //                    type: "candidate",
    //                    candidate: event.candidate,
    //                    callId: callId
    //                })).catch(err => console.error("❌ Failed to send ICE candidate:", err));
    //            } else {
    //                console.error("❌ SignalR is not connected! ICE candidate not sent.");
    //            }
    //        }
    //    };

    //    try {
    //        const offer = await peerConnection.createOffer();
    //        await peerConnection.setLocalDescription(offer);

    //        signalRConnection.invoke("SendSignal", targetUserId, JSON.stringify(offer))
    //            .catch(err => console.error("❌ Failed to send WebRTC Offer:", err));
    //    } catch (error) {
    //        showToast("Failed to start the call!", "danger");
    //    }
    //}
    async function startCall() {
        if (!targetUserId || !callId) {
            console.error("❌ Missing target user or call ID.");
            return;
        }

        console.error(`📞 Starting/rejoining call with ${targetUserId}`);

        initializeWebRTC();

        try {
            localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
            localVideo.srcObject = localStream;
            selfViewVideo.srcObject = localStream;

            localStream.getTracks().forEach(track => {
                peerConnection.addTrack(track, localStream);
            });

            if (signalRConnection.state !== signalR.HubConnectionState.Connected) {
                await signalRConnection.start();
            }

            const offer = await peerConnection.createOffer();
            await peerConnection.setLocalDescription(offer);

            signalRConnection.invoke("SendSignal", targetUserId, JSON.stringify(offer))
                .catch(err => console.error("❌ Failed to send WebRTC Offer:", err));
        } catch (error) {
            console.error("❌ Error setting up call:", error);
        }
    }

    async function endCall() {
        console.error("📴 Ending call...");

        if (!callId) {
            console.error("❌ Error: No Call ID found. Cannot end call.");
            return;
        }

        fetch(`/api/videoconference/end-call/${callId}`, { method: "POST" })
            .then(response => response.json())
            .then(data => {
                signalRConnection.invoke("EndCall", callId);

                document.getElementById("waitingRoomText").innerHTML = "";

                cleanupCallUI();


            })
            .catch(error => console.error("❌ Failed to update call end time:", error));
    }

    function cleanupCallUI() {
        if (peerConnection) {
            peerConnection.ontrack = null;
            peerConnection.onicecandidate = null;
            peerConnection.close();
            peerConnection = null;
        }

        if (localStream) {
            localStream.getTracks().forEach(track => track.stop());
            localStream = null;
        }

        localVideo.srcObject = null;
        remoteVideo.srcObject = null;

        smallSelfView.classList.remove("opacity-100", "scale-100");
        smallSelfView.classList.add("opacity-0", "scale-95");

        callId = null;
        targetUserId = null;
        selectedUsers = [];

        document.getElementById("searchUsers").value = "";
        document.getElementById("userResults").innerHTML = "";
        document.getElementById("selectedUsers").innerHTML = "";
        document.getElementById("startCallBtn").classList.add("d-none");

        let waitingRoomText = document.getElementById("waitingRoomText");
        if (waitingRoomText) {
            waitingRoomText.innerHTML = "";
        }

        setTimeout(() => {
            window.location.reload(); 
        }, 5000);
    }

    function loadRecentCalls() {
        fetch("/api/videoconference/get-recent-calls")
            .then(response => {
                if (!response.ok) {
                    return response.json().then(errorData => { throw new Error(errorData.error || "Unknown error"); });
                }
                return response.json();
            })
            .then(data => {
                let callsList = document.getElementById("recentCallsList");
                callsList.innerHTML = "";

                if (!Array.isArray(data) || data.length === 0) {
                    callsList.innerHTML = `<li class="text-gray-400">No recent calls</li>`;
                    return;
                }

                data.forEach(call => {
                    let li = document.createElement("li");
                    li.classList.add("p-3", "bg-gray-700", "rounded-lg", "cursor-pointer", "hover:bg-gray-600", "relative");

                    let statusColor = call.status === "Missed" ? "text-red-500" : "text-gray-400";
                    let icon = call.status === "Missed"
                        ? `<i class="fas fa-phone-slash ${statusColor} mr-2"></i>`
                        : `<i class="fas fa-phone-alt ${statusColor} mr-2"></i>`;

                    li.innerHTML = `
                    <p class="font-semibold flex items-center">${icon}${call.otherUser}</p>
                    <p class="text-sm text-gray-400">${call.duration}</p>
                    <p class="text-xs text-gray-500">${call.timestamp}</p>
                `;

                    callsList.appendChild(li);
                });
            })
            .catch(error => console.error("❌ Error fetching recent calls:", error));
    }

    async function checkForActiveCall() {
        console.error("🔍 Checking for active call...");

        fetch("/api/videoconference/get-active-call")
            .then(response => response.json())
            .then(data => {
                if (data.hasActiveCall) {
                    callId = data.callId;
                    targetUserId = data.targetUserId;
                    showRejoinButton();
                } else {
                    console.error("🚫 No active call found.");
                }
            })
            .catch(error => console.error("❌ Error checking active call:", error));
    }

    function showRejoinButton() {
        console.error("🔄 Showing 'Join Back' button...");

        document.getElementById("waitingRoom").innerHTML = `
            <p class="text-yellow-400">You disconnected from the video chat.</p>
            <button id="rejoinCallBtn" class="bg-blue-500 text-white px-4 py-2 mt-2 rounded">Join Back</button>
        `;

        setTimeout(() => {
            let rejoinBtn = document.getElementById("rejoinCallBtn");
            if (rejoinBtn) {
                console.error("✅ 'Join Back' button found. Attaching event listener.");
                rejoinBtn.addEventListener("click", function () {
                    console.error("🟢 'Join Back' button CLICKED! Attempting to reconnect...");
                    reconnectToCall();
                });
            } else {
                console.error("❌ 'Join Back' button NOT found! Event listener NOT attached.");
            }
        }, 500);
    }
    

    async function reconnectToCall() {
        console.error("🔄 Checking if call is still active before rejoining...");

        if (!callId) {
            console.error("❌ No Call ID available. Cannot reconnect.");
            return;
        }

        fetch(`/api/videoconference/get-call/${callId}?nocache=${new Date().getTime()}`)
            .then(response => response.json())
            .then(call => {

                if (!call) {
                    console.error("❌ API returned NULL. Call not found.");
                    return;
                }

                if (call.Status === 0) {
                    document.getElementById("noVideoText").innerHTML = `<p class="text-red-500">The call has ended. You cannot rejoin.</p>`;
                    return;
                }

                callId = call.callId;
                targetUserId = call.callerId === currentUserId ? call.receiverId : call.callerId;
                if (!callId || !targetUserId) {
                    console.error("❌ Call ID or Target User ID is still missing!");
                    return;
                }

                document.getElementById("waitingRoom").innerHTML = "";
                initializeWebRTC();
                startCall();
            })
            .catch(error => console.error("❌ Error fetching call status:", error));
    }


    function initializeWebRTC() {
        console.error("🔄 Initializing WebRTC...");

        if (peerConnection) {
            peerConnection.onicecandidate = null;
            peerConnection.ontrack = null;
            peerConnection.close();
            peerConnection = null;
        }

        if (localStream) {
            localStream.getTracks().forEach(track => track.stop());
            localStream = null;
        }

        peerConnection = new RTCPeerConnection({
            iceServers: [
                { urls: "stun:stun.l.google.com:19302" },
                { urls: "turn:openrelay.metered.ca:443", username: "openrelayproject", credential: "openrelayproject" }
            ]
        });

        peerConnection.onicecandidate = event => {
            if (event.candidate) {
                signalRConnection.invoke("SendSignal", targetUserId, JSON.stringify({
                    type: "candidate",
                    candidate: event.candidate,
                    callId: callId
                })).catch(err => console.error("❌ Failed to send ICE candidate:", err));
            }
        };

        peerConnection.ontrack = (event) => {
            if (!remoteVideo.srcObject) {
                remoteStream = new MediaStream(); // ✅ Fix: Store remote stream separately
            }

            remoteStream.addTrack(event.track);
            remoteVideo.srcObject = remoteStream;
            console.log("✅ Remote video stream set!");

            smallSelfView.classList.remove("opacity-0", "scale-95", "hidden");
            smallSelfView.classList.add("opacity-100", "scale-100");
        };

        console.error("✅ WebRTC initialized.");
    }






    startCallBtn.addEventListener("click", startCall);
    endCallBtn.addEventListener("click", endCall);

    document.addEventListener("DOMContentLoaded", function () {
        connectToSignalR();
        loadNotifications();
        checkForInvites();
        loadRecentCalls();
        checkForActiveCall();

        document.getElementById("searchUsers").addEventListener("input", function () {
            let query = this.value.trim();
            if (query.length < 2) return;

            fetch(`/api/videoconference/search-users?query=${encodeURIComponent(query)}`)
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(err => { throw new Error(err.error || "Unknown error"); });
                    }
                    return response.json();
                })
                .then(data => {
                    let resultsList = document.getElementById("userResults");
                    resultsList.innerHTML = "";

                    if (!Array.isArray(data) || data.length === 0) {
                        resultsList.innerHTML = `<li>No users found</li>`;
                        return;
                    }

                    data.forEach(user => {
                        if (!user.id || !user.fullName) return;

                        let li = document.createElement("li");
                        li.textContent = user.fullName;
                        li.setAttribute("data-user-id", user.id);
                        li.classList.add("user-result-item");
                        li.addEventListener("click", function () {
                            addUserToCall(user.id, user.fullName);
                        });
                        resultsList.appendChild(li);
                    });
                })
                .catch(error => {
                    console.error("User search failed:", error);
                    document.getElementById("userResults").innerHTML = `<li>Error: ${error.message}</li>`;
                });
        });

        function addUserToCall(userId, fullName) {
            if (!selectedUsers) {
                selectedUsers = [];
            }

            if (!selectedUsers.some(u => u.id === userId)) {
                selectedUsers.push({ id: userId, name: fullName });

                let list = document.getElementById("selectedUsers");
                let li = document.createElement("li");
                li.textContent = fullName;
                li.setAttribute("data-user-id", userId);
                list.appendChild(li);
            }

            document.getElementById("startCallBtn").classList.remove("d-none");

            document.getElementById("searchUsers").value = "";
            document.getElementById("userResults").innerHTML = "";
        }

        document.getElementById("startCallBtn").addEventListener("click", function () {
            if (selectedUsers.length === 0) {
                return;
            }

            let hasValidUser = false;

            selectedUsers.forEach(user => {
                if (!user.id) {
                    console.error("❌ Error: User ID is missing!", user);
                } else {
                    hasValidUser = true;
                    sendCallInvitation(user.id);
                }
            });

            if (hasValidUser) {
                document.getElementById("waitingRoomText").innerHTML = "Waiting for the other user to accept...";
            }
        });

        function sendCallInvitation(userId) {
            if (!userId) {
                showToast("Please select a user before starting a call!", "danger");
                return;
            }

            if (callId) {
                showToast("You are already in a call!", "danger");
                return;
            }

            targetUserId = userId;

            document.getElementById("waitingRoomText").innerHTML = "";

            signalRConnection.invoke("SendCallRequest", userId)
                .then(() => {
                    missedCallTimer = setTimeout(() => {
                        markMissedCall();
                    }, 60000); // **60 seconds**
                })
                .catch(error => {
                    console.error("❌ SignalR call request failed. Falling back to API:", error);
                });

            signalRConnection.on("ReceiveCallId", (receivedCallId) => {
                callId = receivedCallId;
                startCall();
            });

            let requestBody = JSON.stringify({ ReceiverId: userId });

            fetch("/api/videoconference/invite", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: requestBody
            })
                .then(async response => {
                    let responseBody = await response.json();
                    console.error("🟢 Server Response (API):", responseBody);

                    if (!response.ok) {
                        throw new Error(`Server Error: ${JSON.stringify(responseBody)}`);
                    }

                    if (!callId && responseBody.callId) {
                        callId = responseBody.callId;
                        console.error("✅ Call ID received from API:", callId);
                        startCall();
                    }

                    document.getElementById("searchUsers").value = "";
                    document.getElementById("userResults").innerHTML = "";
                    document.getElementById("selectedUsers").innerHTML = "";
                    document.getElementById("startCallBtn").classList.add("d-none");

                    document.getElementById("waitingRoomText").innerHTML = "Waiting for the other user to accept..";
                })
                .catch(error => console.error("❌ API request failed:", error));
        }

        function markMissedCall() {
            if (!callId) {
                console.error("❌ Error: No Call ID to mark as missed.");
                return;
            }

            fetch(`/api/videoconference/get-call/${callId}`)
                .then(response => response.json())
                .then(call => {
                    if (call.Status === "Active") {
                        return;
                    }

                    fetch(`/api/videoconference/missed-call/${callId}`, { method: "POST" })
                        .then(response => response.json())
                        .then(data => {
                            if (!data.success) {
                                console.error("❌ Missed call API failed:", data.message);
                                return;
                            }

                            let statusElement = document.getElementById("noVideoText");
                            if (statusElement) {
                                statusElement.innerHTML = `<p class="text-red-500 font-bold text-xl">Missed Call</p>
                                                   <p class="text-white text-lg">Try again later.</p>`;
                            }

                            document.getElementById("incomingCall").style.display = "none";
                            document.getElementById("callMessage").innerText = "";
                            document.getElementById("joinCallBtn").style.display = "none";

                            cleanupCallUI();
                            loadNotifications();
                            loadRecentCalls();
                        })
                        .catch(error => console.error("❌ Failed to mark missed call:", error));
                })
                .catch(error => console.error("❌ Error fetching call status:", error));
        }



        function checkForInvites() {
            fetch("/api/videoconference/check-invite")
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(errorData => {
                            throw new Error(`Server Error: ${JSON.stringify(errorData)}`);
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.hasInvite) {
                        document.getElementById("incomingCall").style.display = "block";
                        document.getElementById("callMessage").innerText = `You have been invited to a video call by ${data.senderName}`;
                        document.getElementById("joinCallBtn").setAttribute("data-sender-id", data.senderId);
                    } else {
                        document.getElementById("incomingCall").style.display = "none";
                        document.getElementById("callMessage").innerText = "";
                        document.getElementById("joinCallBtn").style.display = "none";
                    }
                })
                .catch(error => console.error("❌ Error checking for invites:", error.message));
        }

        document.getElementById("joinCallBtn").addEventListener("click", function () {
            let senderId = this.getAttribute("data-sender-id");

            fetch(`/api/videoconference/accept-invite/${senderId}`, { method: "POST" })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(err => { throw new Error(err.error || "Unexpected server error"); });
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        targetUserId = senderId;
                        callId = data.callId;
                        document.getElementById("incomingCall").style.display = "none";
                        document.getElementById("callMessage").innerText = "";
                        document.getElementById("joinCallBtn").style.display = "none";

                        if (missedCallTimer) {
                            clearTimeout(missedCallTimer);
                            missedCallTimer = null;
                        }

                        fetch(`/api/videoconference/mark-call-active/${callId}`, { method: "POST" });

                        startCall();
                    } else {
                        console.error("❌ Call was not accepted properly.");
                    }
                })
                .catch(error => console.error("❌ Error accepting invite:", error.message));
        });


    });</script> 