@using System.Security.Claims
@{
    ViewData["Title"] = "Video Conference";
    // Get the current user ID directly in the view
    var currentUserId = User.FindFirstValue(ClaimTypes.NameIdentifier);
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:wght@400;500;600;700&display=swap" rel="stylesheet">
<link rel="stylesheet" href="~/css/VideoConference/Index.css">

<div id="toastContainer" class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1050;"></div>

<div class="video-conference-wrapper">
    <div class="video-conference-container">
        <!-- Left Panel -->
        <div class="side-panel left-panel">
            <div class="panel-content glass-effect">
                <div class="panel-header">
                    <h2><i class="fas fa-users"></i>Start a Call</h2>
                </div>
                <div class="search-container">
                    <div class="search-box">
                        <i class="fas fa-search search-icon"></i>
                        <input type="text" id="searchUsers" placeholder="Search for a contact...">
                        <button id="clearSearch" class="clear-search-btn">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>

                <!-- Updated user selection interface -->
                <div class="contact-selection">
                    <div id="userResults" class="contact-results custom-scroll"></div>

                    <div id="selectedContact" class="selected-contact-card hidden">
                        <div class="contact-avatar">
                            <i class="fas fa-user"></i>
                        </div>
                        <div class="contact-info">
                            <h3 id="selectedContactName">Contact Name</h3>
                        </div>
                        <button id="removeSelectedContact" class="icon-btn">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>

                    <!-- Add waiting indicator to the left panel -->
                    <div id="waitingIndicator" class="waiting-indicator hidden">
                        <div class="waiting-pulse"></div>
                        <div class="waiting-content">
                            <div class="waiting-avatar">
                                <i class="fas fa-user"></i>
                            </div>
                            <div class="waiting-text">
                                <h4>Waiting for response</h4>
                                <div class="typing-indicator">
                                    <span></span>
                                    <span></span>
                                    <span></span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div id="emptySelection" class="empty-selection">
                        <i class="fas fa-user-plus"></i>
                        <p>Search and select a contact to call</p>
                    </div>
                </div>

                <button id="startCallBtn" class="primary-btn call-btn hidden">
                    <i class="fas fa-video"></i>
                    <span>Start Video Call</span>
                </button>
            </div>
        </div>

        <!-- Main Video Area -->
        <div class="main-video-area">
            <div class="video-container glass-effect">
                <div class="status-banner" id="callStatusBanner">
                    <span id="callStatusText"></span>
                </div>

                <video id="remoteVideo" class="main-video" autoplay playsinline></video>
                <video id="localVideo" class="main-video hidden" autoplay playsinline muted></video>

                <div id="localVideoSmall" class="pip-video">
                    <video id="selfView" autoplay playsinline muted></video>
                </div>

                <div id="noVideoText" class="no-video-placeholder">
                    <div class="placeholder-content">
                        <i class="fas fa-video-slash"></i>
                        <p>No active video call</p>
                    </div>
                </div>

                <!-- Moved incoming call UI here -->
                <div id="incomingCall" class="incoming-call-main hidden">
                    <div class="incoming-call-content">
                        <div class="call-indicator">
                            <i class="fas fa-phone-volume"></i>
                        </div>
                        <h3 id="callMessage"></h3>
                        <button id="joinCallBtn" class="primary-btn accept-call">
                            <i class="fas fa-phone"></i>
                            <span>Accept Call</span>
                        </button>
                    </div>
                </div>

                <div id="rejoinCall" class="incoming-call-main hidden">
                    <div class="incoming-call-content">
                        <div class="call-indicator">
                            <i class="fas fa-phone-volume"></i>
                        </div>
                        <h3>You disconnected from an active call</h3>
                        <button id="rejoinCallBtn" class="primary-btn accept-call">
                            <i class="fas fa-phone"></i>
                            <span>Rejoin Call</span>
                        </button>
                    </div>
                </div>

                <div class="video-controls">
                    <button id="muteAudioBtn" class="control-btn">
                        <i class="fas fa-microphone"></i>
                    </button>
                    <button id="toggleVideoBtn" class="control-btn">
                        <i class="fas fa-video"></i>
                    </button>
                    <button id="endCallBtn" class="control-btn end-call">
                        <i class="fas fa-phone-slash"></i>
                    </button>
                </div>
            </div>
        </div>

        <!-- Right Panel -->
        <div class="side-panel right-panel">
            <div class="panel-content glass-effect">
                <div class="panel-header">
                    <h2><i class="fas fa-clock-rotate-left"></i>Recent Calls</h2>
                </div>
                <div class="recent-calls custom-scroll">
                    <ul id="recentCallsList"></ul>
                </div>

                <div class="call-status">
                    <div id="waitingRoom" class="waiting-room">
                        <h4 id="waitingRoomText"></h4>
                    </div>

                    <div id="incomingCall" class="incoming-call" style="display: none;">
                        <div class="incoming-call-content">
                            <div class="call-indicator">
                                <i class="fas fa-phone-volume"></i>
                            </div>
                            <h3 id="callMessage"></h3>
                            <button id="joinCallBtn" class="primary-btn accept-call">
                                <i class="fas fa-phone"></i>
                                <span>Accept Call</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/js/all.min.js"></script>

<script>const startCallBtn = document.getElementById("startCallBtn");
    const endCallBtn = document.getElementById("endCallBtn");
    const localVideo = document.getElementById("localVideo");
    const remoteVideo = document.getElementById("remoteVideo");

    let localStream;
    let peerConnection;
    let signalRConnection;
    let currentUserId = "@currentUserId"; // Use the server-side value
    let targetUserId = null;
    let callId = null;
    let selectedContact = null;
    selectedUsers = [];

    const muteAudioBtn = document.getElementById("muteAudioBtn");
    const toggleVideoBtn = document.getElementById("toggleVideoBtn");
    let isMuted = false;
    let isVideoOff = false;

    const smallSelfView = document.getElementById("localVideoSmall");
    const selfViewVideo = document.getElementById("selfView");
    let isSwapped = false;

    let missedCallTimer;

    muteAudioBtn.addEventListener("click", function () {
        if (localStream) {
            localStream.getAudioTracks()[0].enabled = isMuted;
            isMuted = !isMuted;
            this.classList.toggle("bg-red-500");
            this.innerHTML = this.classList.contains("bg-red-500") ? '<i class="fas fa-microphone-slash mr-2"></i>' : '<i class="fas fa-microphone mr-2"></i>';
        }
    });

    toggleVideoBtn.addEventListener("click", function () {
        if (localStream) {
            localStream.getVideoTracks()[0].enabled = isVideoOff;
            isVideoOff = !isVideoOff;
            this.classList.toggle("bg-red-500");
            this.innerHTML = this.classList.contains("bg-red-500") ? '<i class="fas fa-video-slash mr-2"></i>' : '<i class="fas fa-video mr-2"></i>';
        }
    });


    async function connectToSignalR() {
        // If we already have a connection, close it first
        if (signalRConnection) {
            try {
                await signalRConnection.stop();
                console.log("Stopped existing SignalR connection");
            } catch (error) {
                console.error("Error stopping existing SignalR connection:", error);
            }
        }

        // Create a new connection
        signalRConnection = new signalR.HubConnectionBuilder()
            .withUrl("/videocallhub")
            .configureLogging(signalR.LogLevel.Information)
            .withAutomaticReconnect([0, 1000, 2000, 5000, 10000, 15000])
            .build();

        try {
            await signalRConnection.start();
            console.log("✅ SignalR connected successfully");

            signalRConnection.onclose(async (error) => {
                console.log("SignalR connection closed.", error ? `Error: ${error}` : "");

                // Only try to reconnect if we're not intentionally stopping
                if (!window.intentionalDisconnect) {
                    await tryReconnect();
                }
            });

            setupSignalRHandlers();
            return true;
        } catch (error) {
            console.error("❌ SignalR connection failed:", error);
            await tryReconnect();
            return false;
        }
    }

    async function tryReconnect() {
        let attempts = 0;
        const maxAttempts = 5;

        while (attempts < maxAttempts) {
            attempts++;
            try {
                console.log(`SignalR reconnection attempt ${attempts}/${maxAttempts}...`);
                await signalRConnection.start();
                console.log("✅ SignalR reconnected successfully");
                setupSignalRHandlers();
                return true;
            } catch (error) {
                console.error(`❌ SignalR reconnection attempt ${attempts} failed:`, error);
                if (attempts < maxAttempts) {
                    // Wait longer between each attempt
                    await new Promise(resolve => setTimeout(resolve, 2000 * attempts));
                }
            }
        }

        console.error("❌ Failed to reconnect after multiple attempts");
        return false;
    }

    function setupSignalRHandlers() {
        signalRConnection.off("ReceiveCallRequest");
        signalRConnection.off("ReceiveSignal");
        signalRConnection.off("CallEnded");

        signalRConnection.on("ReceiveCallRequest", (callerId, callerName, receivedCallId) => {
            console.log("📞 Received call request from:", callerName);

            targetUserId = callerId;
            callId = receivedCallId;

            // Hide the no video placeholder
            document.getElementById("noVideoText").style.display = "none";

            // Show incoming call in main area
            const incomingCallElement = document.getElementById("incomingCall");
            incomingCallElement.classList.remove("hidden");
            incomingCallElement.style.display = "flex";

            // Update call message
            document.getElementById("callMessage").innerText = `${callerName} is calling you`;

            // Show join button and set sender ID
            const joinCallBtn = document.getElementById("joinCallBtn");
            joinCallBtn.setAttribute("data-sender-id", callerId);
            joinCallBtn.style.display = "block";
        });

        signalRConnection.on("ReceiveSignal", async (senderId, signal) => {
            try {
                const parsedSignal = JSON.parse(signal);

                if (!peerConnection) {
                    initializeWebRTC();
                }

                if (parsedSignal.type === "offer") {
                    console.log("📡 Received offer from:", senderId);
                    await peerConnection.setRemoteDescription(new RTCSessionDescription(parsedSignal));

                    // Only create answer if we already have localStream (meaning user accepted the call)
                    if (localStream) {
                        console.log("📡 Creating answer...");
                        const answer = await peerConnection.createAnswer();
                        await peerConnection.setLocalDescription(answer);

                        console.log("📡 Sending answer to:", senderId);
                        await signalRConnection.invoke("SendSignal", senderId, JSON.stringify(peerConnection.localDescription))
                            .catch(err => console.error("Error sending answer:", err));
                    } else {
                        console.log("⚠️ Not creating answer yet - waiting for user to accept call");
                    }
                } else if (parsedSignal.type === "answer") {
                    console.log("📡 Received answer from:", senderId);
                    await peerConnection.setRemoteDescription(new RTCSessionDescription(parsedSignal));

                    // Hide waiting indicator when we get an answer (other user accepted)
                    document.getElementById("waitingIndicator").classList.add("hidden");
                    console.log("✅ Remote description set successfully");
                } else if (parsedSignal.candidate) {
                    console.log("📡 Received ICE candidate");
                    try {
                        await peerConnection.addIceCandidate(parsedSignal.candidate);
                    } catch (e) {
                        console.error("Error adding received ice candidate:", e);
                    }
                }
            } catch (error) {
                console.error("Error handling received signal:", error);
            }
        });

        signalRConnection.on("CallEnded", (endedCallId, durationText) => {
            console.log("📞 Call ended:", endedCallId);

            // Hide waiting indicator if it was showing
            document.getElementById("waitingIndicator").classList.add("hidden");

            // Hide incoming call UI if it was showing (for the user who didn't accept yet)
            const incomingCallElement = document.getElementById("incomingCall");
            if (!incomingCallElement.classList.contains("hidden")) {
                incomingCallElement.classList.add("hidden");
                incomingCallElement.style.display = "none";
            }

            // Hide rejoin call UI if it was showing
            const rejoinCallElement = document.getElementById("rejoinCall");
            if (!rejoinCallElement.classList.contains("hidden")) {
                rejoinCallElement.classList.add("hidden");
            }

            // Show call ended message with the previous design
            const statusBanner = document.getElementById("callStatusBanner");
            statusBanner.innerHTML = `<span>Call ended: ${durationText}</span>`;
            statusBanner.style.display = "block";

            // Show the no video placeholder with call ended message
            const noVideoText = document.getElementById("noVideoText");
            noVideoText.style.display = "flex";

            // Create call ended UI with duration
            noVideoText.innerHTML = `
                <div class="placeholder-content">
                    <i class="fas fa-phone-slash text-red-500"></i>
                    <h3 class="text-xl font-bold">Call Ended</h3>
                    <p class="text-lg">${durationText}</p>
                </div>
            `;

            // Clean up the call without initiating another end call request
            cleanupCallResources();

            // Refresh page after a delay
            setTimeout(() => {
                window.intentionalDisconnect = false; // Reset the flag
                window.location.reload();
            }, 5000);
        });

        signalRConnection.on("CallStarted", async (receivedCallId) => {
            console.log("📞 Call started with ID:", receivedCallId);
            callId = receivedCallId;

            try {
                // Get local stream if we don't have it yet
                if (!localStream) {
                    localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
                }

                // Initialize WebRTC if not already initialized
                if (!peerConnection) {
                    initializeWebRTC();
                }

                // Show local stream in main area initially
                remoteVideo.srcObject = localStream;
                remoteVideo.muted = true;
                remoteVideo.style.display = 'block';

                // Hide PiP initially
                const pipContainer = document.getElementById('localVideoSmall');
                pipContainer.style.opacity = '0';
                pipContainer.style.transform = 'scale(0.95)';

                // Hide placeholder and incoming call UI
                document.getElementById('noVideoText').style.display = 'none';
                document.getElementById('incomingCall').classList.add('hidden');
            } catch (error) {
                console.error("❌ Error in CallStarted handler:", error);
            }
        });
    }

    async function sendSignalSafely(userId, signal) {
        // Don't attempt to send if userId is not valid
        if (!userId) {
            console.error("❌ Cannot send signal: Missing target user ID");
            return;
        }

        // Check if we have a valid connection
        if (!signalRConnection) {
            console.error("❌ SignalR connection object is null");
            try {
                await connectToSignalR();
            } catch (error) {
                console.error("❌ Failed to establish SignalR connection:", error);
                return; // Exit if we can't connect
            }
        }

        // Check connection state
        if (signalRConnection.state !== signalR.HubConnectionState.Connected) {
            console.warn("⚠️ SignalR not connected. Current state:", signalRConnection.state);
            try {
                // If disconnected, try to reconnect
                if (signalRConnection.state === signalR.HubConnectionState.Disconnected) {
                    await signalRConnection.start();
                    console.log("✅ SignalR reconnected successfully");
                    setupSignalRHandlers();
                } else {
                    // If in connecting or reconnecting state, wait a bit
                    await new Promise(resolve => setTimeout(resolve, 1000));
                }
            } catch (error) {
                console.error("❌ Failed to reconnect SignalR:", error);
                return; // Exit if we can't reconnect
            }
        }

        // Now try to send the signal
        try {
            await signalRConnection.invoke("SendSignal", userId, signal);
        } catch (error) {
            console.error("❌ Failed to send signal:", error);

            // Only try once more to avoid infinite loops
            if (!error.message.includes("already tried")) {
                error.message += " (already tried reconnecting)";

                // Wait a moment before trying again
                await new Promise(resolve => setTimeout(resolve, 1000));

                try {
                    await connectToSignalR();
                    await signalRConnection.invoke("SendSignal", userId, signal);
                } catch (retryError) {
                    console.error("❌ Final attempt to send signal failed:", retryError);
                }
            }
        }
    }

    async function startCall() {
        if (!targetUserId || !callId) {
            console.error("❌ Missing target user or call ID.");
            return;
        }

        try {
            // Get local media stream if we don't have it
            if (!localStream) {
                localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
            }

            // Clear any existing video sources first
            remoteVideo.srcObject = null;
            selfViewVideo.srcObject = null;

            // Show local stream in main video area
            localVideo.srcObject = localStream;
            localVideo.style.display = 'block';
            localVideo.classList.remove('hidden');
            remoteVideo.style.display = 'none';

            // Hide PiP initially
            const pipContainer = document.getElementById('localVideoSmall');
            pipContainer.style.opacity = '0';
            pipContainer.style.transform = 'scale(0.95)';

            // Hide placeholder
            document.getElementById('noVideoText').style.display = 'none';

            // Initialize WebRTC
            initializeWebRTC();

            // Create and send offer
            const offer = await peerConnection.createOffer();
            await peerConnection.setLocalDescription(offer);
            await sendSignalSafely(targetUserId, JSON.stringify(offer));

        } catch (error) {
            console.error("❌ Error starting call:", error);
        }
    }

    async function reconnectToCall() {
        console.error("🔄 Attempting to reconnect to call...");

        if (!callId) {
            console.error("❌ No Call ID available. Cannot reconnect.");
            return;
        }

        try {
            // First, ensure SignalR is connected with proper error handling
            if (!signalRConnection || signalRConnection.state !== signalR.HubConnectionState.Connected) {
                console.error("📡 Reconnecting SignalR...");
                try {
                    await connectToSignalR();
                    // Wait a moment to ensure connection is stable
                    await new Promise(resolve => setTimeout(resolve, 1000));
                } catch (error) {
                    console.error("❌ Failed to reconnect SignalR:", error);
                    document.getElementById("noVideoText").innerHTML = `
                        <p class="text-red-500">Failed to reconnect to SignalR</p>
                        <button onclick="reconnectToCall()" class="primary-btn mt-3">Try Again</button>
                    `;
                    return;
                }
            }

            // Get call information
            const response = await fetch(`/api/videoconference/get-call/${callId}`);
            const call = await response.json();

            if (!call || call.Status === "Ended") {
                document.getElementById("noVideoText").innerHTML = `<p class="text-red-500">The call has ended. You cannot rejoin.</p>`;
                return;
            }

            console.log("Call data:", call);
            console.log("Current user ID:", currentUserId);

            // Set target user ID based on call data
            if (call.CallerId && call.ReceiverId) {
                // If we have both IDs in the call, determine which one is not the current user
                if (call.CallerId !== currentUserId) {
                    targetUserId = call.CallerId;
                } else {
                    targetUserId = call.ReceiverId;
                }
                console.log("Target user ID set to:", targetUserId);
            } else {
                console.error("❌ Call data missing user IDs:", call);
            }

            // Verify we have a valid target user ID
            if (!targetUserId) {
                console.error("❌ Failed to determine target user ID");
                document.getElementById("noVideoText").innerHTML = `
                    <p class="text-red-500">Failed to identify the other participant</p>
                    <p class="text-sm text-gray-400">Call data: ${JSON.stringify(call)}</p>
                    <p class="text-sm text-gray-400">Current user: ${currentUserId}</p>
                    <button onclick="reconnectToCall()" class="primary-btn mt-3">Try Again</button>
                `;
                return;
            }

            try {
                // Clean up any existing connections first
                if (peerConnection) {
                    peerConnection.close();
                    peerConnection = null;
                }

                // Stop all tracks in the existing stream
                if (localStream) {
                    localStream.getTracks().forEach(track => track.stop());
                    localStream = null;
                }

                // Clear all video sources
                remoteVideo.srcObject = null;
                localVideo.srcObject = null;
                selfViewVideo.srcObject = null;

                // Get fresh camera/mic access
                try {
                    localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
                } catch (mediaError) {
                    console.error("❌ Failed to access camera/mic:", mediaError);
                    document.getElementById("noVideoText").innerHTML = `
                        <p class="text-red-500">Failed to access camera or microphone</p>
                        <button onclick="reconnectToCall()" class="primary-btn mt-3">Try Again</button>
                    `;
                    return;
                }

                // Show local video immediately
                localVideo.srcObject = localStream;
                localVideo.style.display = 'block';
                localVideo.classList.remove('hidden');
                remoteVideo.style.display = 'none';

                // Hide placeholder and rejoin UI
                document.getElementById('noVideoText').style.display = 'none';
                document.getElementById('rejoinCall').classList.add('hidden');

                // Create new peer connection
                peerConnection = new RTCPeerConnection({
                    iceServers: [
                        { urls: "stun:stun.l.google.com:19302" },
                        { urls: "turn:openrelay.metered.ca:443", username: "openrelayproject", credential: "openrelayproject" }
                    ]
                });

                // Set up event handlers
                peerConnection.onicecandidate = async (event) => {
                    if (event.candidate) {
                        try {
                            await sendSignalSafely(targetUserId, JSON.stringify({
                                type: "candidate",
                                candidate: event.candidate
                            }));
                        } catch (error) {
                            console.error("❌ Error sending ICE candidate:", error);
                        }
                    }
                };

                peerConnection.ontrack = (event) => {
                    console.log("📡 Received remote track");
                    remoteVideo.srcObject = event.streams[0];
                    remoteVideo.muted = false;
                    remoteVideo.style.display = 'block';
                    localVideo.style.display = 'none';

                    // Move local stream to PiP
                    selfViewVideo.srcObject = localStream;
                    selfViewVideo.muted = true;

                    // Show PiP container
                    const pipContainer = document.getElementById('localVideoSmall');
                    pipContainer.classList.add('active');
                    pipContainer.style.opacity = '1';
                    pipContainer.style.transform = 'scale(1)';

                    // Hide waiting indicator when we receive video
                    document.getElementById("waitingIndicator").classList.add("hidden");

                    console.log("✅ Remote video feed set successfully");
                };

                // Add tracks to peer connection
                const videoTrack = localStream.getVideoTracks()[0];
                const audioTrack = localStream.getAudioTracks()[0];

                if (videoTrack) {
                    peerConnection.addTrack(videoTrack, localStream);
                }
                if (audioTrack) {
                    peerConnection.addTrack(audioTrack, localStream);
                }

                // Create and send new offer
                const offer = await peerConnection.createOffer({
                    offerToReceiveAudio: true,
                    offerToReceiveVideo: true
                });

                await peerConnection.setLocalDescription(offer);

                // Send the offer with our improved sendSignalSafely function
                await sendSignalSafely(targetUserId, JSON.stringify(offer));

                // Mark call as active
                await fetch(`/api/videoconference/mark-call-active/${callId}`, { method: "POST" });

                console.error("✅ Reconnection process completed successfully");
            } catch (error) {
                console.error("❌ Error during reconnection:", error);
                document.getElementById("noVideoText").innerHTML = `
                    <p class="text-red-500">Failed to rejoin the call</p>
                    <button onclick="reconnectToCall()" class="primary-btn mt-3">Try Again</button>
                `;
            }
        } catch (error) {
            console.error("❌ Error fetching call status:", error);
        }
    }

    function initializeWebRTC() {
        if (peerConnection) {
            peerConnection.close();
        }

        peerConnection = new RTCPeerConnection({
            iceServers: [
                { urls: "stun:stun.l.google.com:19302" },
                { urls: "turn:openrelay.metered.ca:443", username: "openrelayproject", credential: "openrelayproject" }
            ]
        });

        peerConnection.onicecandidate = async (event) => {
            if (event.candidate) {
                try {
                    await sendSignalSafely(targetUserId, JSON.stringify({
                        type: "candidate",
                        candidate: event.candidate
                    }));
                } catch (error) {
                    console.error("❌ Error sending ICE candidate:", error);
                }
            }
        };

        peerConnection.ontrack = (event) => {
            console.log("📡 Received remote track");

            // Clear any existing video sources first
            if (remoteVideo.srcObject !== event.streams[0]) {
                remoteVideo.srcObject = null;
                localVideo.srcObject = null;
                selfViewVideo.srcObject = null;
            }

            // Move local stream to PiP
            selfViewVideo.srcObject = localStream;
            selfViewVideo.muted = true;

            // Show remote stream in main area
            remoteVideo.srcObject = event.streams[0];
            remoteVideo.muted = false;
            remoteVideo.style.display = 'block';
            localVideo.style.display = 'none';

            // Show PiP container with animation
            const pipContainer = document.getElementById('localVideoSmall');
            pipContainer.classList.add('active');
            pipContainer.style.opacity = '1';
            pipContainer.style.transform = 'scale(1)';

            // Hide waiting indicator when we receive video
            document.getElementById("waitingIndicator").classList.add("hidden");

            console.log("✅ Remote video feed set successfully");
        };

        // Only add tracks if we have localStream
        if (localStream) {
            const videoTrack = localStream.getVideoTracks()[0];
            const audioTrack = localStream.getAudioTracks()[0];

            if (videoTrack) {
                peerConnection.addTrack(videoTrack, localStream);
            }
            if (audioTrack) {
                peerConnection.addTrack(audioTrack, localStream);
            }
        }
    }

    smallSelfView.addEventListener("click", function () {
        if (!localStream || !remoteVideo.srcObject) {
            console.error("❌ Missing video streams, swap not possible.");
            return;
        }

        if (isSwapped) {
            let tempStream = selfViewVideo.srcObject;
            selfViewVideo.srcObject = remoteVideo.srcObject;
            remoteVideo.srcObject = tempStream;

            remoteVideo.muted = false;
            selfViewVideo.muted = true;
        } else {
            let tempStream = selfViewVideo.srcObject;
            selfViewVideo.srcObject = remoteVideo.srcObject;
            remoteVideo.srcObject = tempStream;

            remoteVideo.muted = true;
            selfViewVideo.muted = false;
        }

        isSwapped = !isSwapped;
    });

    endCallBtn.addEventListener("click", function() {
        endCall();
    });

    function endCall() {
        if (!callId) {
            console.error("❌ No active call to end");
            return;
        }

        console.log("📞 Ending call:", callId);
        
        // First call the API to end the call and mark invitation as accepted
        fetch(`/api/videoconference/end-call/${callId}`, {
            method: "POST"
        })
        .then(response => {
            if (!response.ok) {
                return response.json().then(errorData => { throw new Error(errorData.error || "Unknown error"); });
            }
            return response.json();
        })
        .then(data => {
            console.log("✅ Call ended successfully:", data);
            
            // Clean up resources
            cleanupCallResources();
            
            // Show call ended message
            const statusBanner = document.getElementById("callStatusBanner");
            statusBanner.innerHTML = `<span>Call ended: ${data.message}</span>`;
            statusBanner.style.display = "block";
            
            // Show the no video placeholder
            const noVideoText = document.getElementById("noVideoText");
            noVideoText.style.display = "flex";
            
            // Update UI
            loadRecentCalls();
        })
        .catch(error => {
            console.error("❌ Failed to end call:", error);
            // Still clean up resources even if the API call fails
            cleanupCallResources();
        });
    }

    function cleanupCallResources() {
        // Set flag to prevent automatic reconnection attempts when we intentionally disconnect
        window.intentionalDisconnect = true;
        
        if (peerConnection) {
            peerConnection.ontrack = null;
            peerConnection.onicecandidate = null;
            peerConnection.close();
            peerConnection = null;
        }

        if (localStream) {
            localStream.getTracks().forEach(track => track.stop());
            localStream = null;
        }

        localVideo.srcObject = null;
        remoteVideo.srcObject = null;
        selfViewVideo.srcObject = null;

        const pipContainer = document.getElementById('localVideoSmall');
        pipContainer.style.opacity = '0';
        pipContainer.style.transform = 'scale(0.95)';

        // Reset variables
        callId = null;
        targetUserId = null;
        selectedUsers = [];
        selectedContact = null;

        // Clear UI elements
        document.getElementById("searchUsers").value = "";
        document.getElementById("userResults").innerHTML = "";

        // Reset selected contact UI
        document.getElementById("selectedContact").classList.add("hidden");
        document.getElementById("emptySelection").classList.remove("hidden");
        document.getElementById("startCallBtn").classList.add("hidden");

        // Hide waiting indicator
        document.getElementById("waitingIndicator").classList.add("hidden");
        
        // Re-enable search field
        document.getElementById("searchUsers").disabled = false;
        document.getElementById("searchUsers").classList.remove("disabled");
        document.getElementById("clearSearch").style.opacity = "1";

        let waitingRoomText = document.getElementById("waitingRoomText");
        if (waitingRoomText) {
            waitingRoomText.innerHTML = "";
        }

        // Stop SignalR connection
        if (signalRConnection) {
            signalRConnection.stop().catch(err => console.error("Error stopping SignalR:", err));
        }
    }

    function cleanupCallUI() {
        // Clean up resources
        cleanupCallResources();

        // Refresh page after a delay
        setTimeout(() => {
            window.intentionalDisconnect = false; // Reset the flag
            window.location.reload();
        }, 5000);
    }

    function loadRecentCalls() {
        fetch("/api/videoconference/get-recent-calls")
            .then(response => {
                if (!response.ok) {
                    return response.json().then(errorData => { throw new Error(errorData.error || "Unknown error"); });
                }
                return response.json();
            })
            .then(data => {
                let callsList = document.getElementById("recentCallsList");
                callsList.innerHTML = "";

                if (!Array.isArray(data) || data.length === 0) {
                    callsList.innerHTML = `<li class="text-gray-400">No recent calls</li>`;
                    return;
                }

                data.forEach(call => {
                    let li = document.createElement("li");
                    li.classList.add("p-3", "bg-gray-700", "rounded-lg", "cursor-pointer", "hover:bg-gray-600", "relative");

                    let statusColor = call.status === "Missed" ? "text-red-500" : "text-gray-400";
                    let icon = call.status === "Missed"
                        ? `<i class="fas fa-phone-slash ${statusColor} mr-2"></i>`
                        : `<i class="fas fa-phone-alt ${statusColor} mr-2"></i>`;

                    li.innerHTML = `
                    <p class="font-semibold flex items-center">${icon}${call.otherUser}</p>
                    <p class="text-sm text-gray-400">${call.duration}</p>
                    <p class="text-xs text-gray-500">${call.timestamp}</p>
                `;

                    callsList.appendChild(li);
                });
            })
            .catch(error => console.error("❌ Error fetching recent calls:", error));
    }

    async function checkForActiveCall() {
        console.error("🔍 Checking for active call...");

        fetch("/api/videoconference/get-active-call")
            .then(response => response.json())
            .then(data => {
                if (data.hasActiveCall) {
                    callId = data.callId;
                    targetUserId = data.targetUserId;
                    showRejoinButton();
                } else {
                    console.error("🚫 No active call found.");
                }
            })
            .catch(error => console.error("❌ Error checking active call:", error));
    }

    function showRejoinButton() {
        console.error("🔄 Showing rejoin message...");

        // Show the rejoin UI in the middle
        const rejoinUI = document.getElementById("rejoinCall");
        rejoinUI.classList.remove("hidden");

        // Hide other UI elements
        document.getElementById("noVideoText").style.display = "none";
        document.getElementById("incomingCall").classList.add("hidden");

        // Add click handler to rejoin button
        document.getElementById("rejoinCallBtn").addEventListener("click", function() {
            console.error("🟢 Rejoin button clicked! Attempting to reconnect...");
            rejoinUI.classList.add("hidden");
            reconnectToCall();
        });
    }


    startCallBtn.addEventListener("click", startCall);

    document.addEventListener("DOMContentLoaded", function () {
        connectToSignalR();
        loadNotifications();
        checkForInvites();
        loadRecentCalls();
        checkForActiveCall();

        // Add clear search button functionality
        document.getElementById("clearSearch").addEventListener("click", function() {
            document.getElementById("searchUsers").value = "";
            document.getElementById("userResults").innerHTML = "";
            this.style.opacity = "0";
        });

        document.getElementById("searchUsers").addEventListener("input", function () {
            let query = this.value.trim();

            // Show/hide clear button based on input
            const clearBtn = document.getElementById("clearSearch");
            clearBtn.style.opacity = query.length > 0 ? "1" : "0";

            if (query.length < 2) {
                document.getElementById("userResults").innerHTML = "";
                return;
            }

            fetch(`/api/videoconference/search-users?query=${encodeURIComponent(query)}`)
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(err => { throw new Error(err.error || "Unknown error"); });
                    }
                    return response.json();
                })
                .then(data => {
                    let resultsList = document.getElementById("userResults");
                    resultsList.innerHTML = "";

                    if (!Array.isArray(data) || data.length === 0) {
                        resultsList.innerHTML = `<div class="no-results">No contacts found</div>`;
                        return;
                    }

                    data.forEach(user => {
                        if (!user.id || !user.fullName) return;

                        let contactCard = document.createElement("div");
                        contactCard.className = "contact-card";
                        contactCard.setAttribute("data-user-id", user.id);
                        contactCard.setAttribute("data-user-name", user.fullName);

                        contactCard.innerHTML = `
                            <div class="contact-avatar">
                                <i class="fas fa-user"></i>
                            </div>
                            <div class="contact-info">
                                <h3>${user.fullName}</h3>
                            </div>
                        `;

                        contactCard.addEventListener("click", function () {
                            selectContact(user.id, user.fullName);
                        });

                        resultsList.appendChild(contactCard);
                    });
                })
                .catch(error => {
                    console.error("User search failed:", error);
                    document.getElementById("userResults").innerHTML = `<div class="no-results">Error: ${error.message}</div>`;
                });
        });

        function selectContact(userId, fullName) {
            // Clear any previously selected contact
            const previouslySelected = document.querySelector(".contact-card.active");
            if (previouslySelected) {
                previouslySelected.classList.remove("active");
            }

            // Mark the selected contact card as active
            const selectedCard = document.querySelector(`.contact-card[data-user-id="${userId}"]`);
            if (selectedCard) {
                selectedCard.classList.add("active");
            }

            // Update the selected contact display
            document.getElementById("selectedContactName").textContent = fullName;
            document.getElementById("selectedContact").classList.remove("hidden");
            document.getElementById("emptySelection").classList.add("hidden");

            // Show the start call button
            document.getElementById("startCallBtn").classList.remove("hidden");

            // Store the selected contact info
            selectedContact = { id: userId, name: fullName };
            targetUserId = userId;

            // Clear the search results
            document.getElementById("userResults").innerHTML = "";
            document.getElementById("searchUsers").value = "";
        }

        document.getElementById("removeSelectedContact").addEventListener("click", function() {
            // Clear the selected contact
            document.getElementById("selectedContact").classList.add("hidden");
            document.getElementById("emptySelection").classList.remove("hidden");
            document.getElementById("startCallBtn").classList.add("hidden");

            // Reset variables
            selectedContact = null;
            targetUserId = null;
        });

        document.getElementById("startCallBtn").addEventListener("click", function () {
            if (!selectedContact) {
                showToast("Please select a contact before starting a call!", "danger");
                return;
            }

            sendCallInvitation(selectedContact.id);
        });

        function sendCallInvitation(userId) {
            if (!userId) {
                showToast("Please select a contact before starting a call!", "danger");
                return;
            }

            if (callId) {
                showToast("You are already in a call!", "danger");
                return;
            }

            targetUserId = userId;

            // Hide user selection UI elements
            document.getElementById("selectedContact").classList.add("hidden");
            document.getElementById("emptySelection").classList.add("hidden");
            document.getElementById("startCallBtn").classList.add("hidden");
            
            // Disable search field during call
            document.getElementById("searchUsers").disabled = true;
            document.getElementById("searchUsers").classList.add("disabled");
            document.getElementById("clearSearch").style.opacity = "0";

            // Show waiting indicator in the left panel
            document.getElementById("waitingIndicator").classList.remove("hidden");
            document.getElementById("waitingRoomText").innerHTML = "";

            // First send the API request to create the call
            let requestBody = JSON.stringify({ ReceiverId: userId });
            fetch("/api/videoconference/invite", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: requestBody
            })
            .then(async response => {
                let responseBody = await response.json();
                console.error("🟢 Server Response (API):", responseBody);

                if (!response.ok) {
                    throw new Error(`Server Error: ${JSON.stringify(responseBody)}`);
                }

                callId = responseBody.callId;
                console.error("✅ Call ID received from API:", callId);

                // Only after getting callId, send SignalR request
                return signalRConnection.invoke("SendCallRequest", userId);
            })
            .then(() => {
                // Start the missed call timer
                missedCallTimer = setTimeout(() => {
                    markMissedCall();
                }, 60000);

                // Get camera access and start the call
                startCall();
            })
            .catch(error => {
                console.error("❌ Call invitation failed:", error);
                // Hide waiting indicator on error
                document.getElementById("waitingIndicator").classList.add("hidden");
                
                // Re-enable search field
                document.getElementById("searchUsers").disabled = false;
                document.getElementById("searchUsers").classList.remove("disabled");
                document.getElementById("clearSearch").style.opacity = "1";
                
                // Show user selection UI elements again
                document.getElementById("selectedContact").classList.remove("hidden");
                document.getElementById("startCallBtn").classList.remove("hidden");
            });
        }

        function markMissedCall() {
            if (!callId) {
                console.error("❌ Error: No Call ID to mark as missed.");
                return;
            }

            fetch(`/api/videoconference/get-call/${callId}`)
                .then(response => response.json())
                .then(call => {
                    if (call.Status === "Active") {
                        return;
                    }

                    fetch(`/api/videoconference/missed-call/${callId}`, { method: "POST" })
                        .then(response => response.json())
                        .then(data => {
                            if (!data.success) {
                                console.error("❌ Missed call API failed:", data.message);
                                return;
                            }

                            // Show missed call message in the middle of the screen
                            const noVideoText = document.getElementById("noVideoText");
                            noVideoText.style.display = "flex";

                            // Create missed call UI
                            noVideoText.innerHTML = `
                                <div class="placeholder-content">
                                    <i class="fas fa-user-clock text-yellow-500"></i>
                                    <h3 class="text-xl font-bold text-yellow-500">User Not Available</h3>
                                    <p class="text-lg text-white">The other user didn't join the call.</p>
                                    <p class="text-md text-gray-300">Please try again later.</p>
                                </div>
                            `;

                            // Hide other UI elements
                            document.getElementById("incomingCall").classList.add("hidden");
                            document.getElementById("rejoinCall").classList.add("hidden");
                            document.getElementById("waitingRoomText").innerHTML = "";

                            // Clean up resources but don't refresh page yet
                            cleanupCallResources();

                            // Update UI
                            loadNotifications();
                            loadRecentCalls();

                            // After 5 seconds, refresh the page
                            setTimeout(() => {
                                window.location.reload();
                            }, 5000);
                        })
                        .catch(error => console.error("❌ Failed to mark missed call:", error));
                })
                .catch(error => console.error("❌ Error fetching call status:", error));
        }



        function checkForInvites() {
            fetch("/api/videoconference/check-invite")
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(errorData => {
                            throw new Error(`Server Error: ${JSON.stringify(errorData)}`);
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.hasInvite) {
                        // Store the call ID and target user ID for potential call end events
                        targetUserId = data.senderId;

                        // Check if the call is still active before showing the invitation
                        fetch(`/api/videoconference/get-call-by-users?senderId=${data.senderId}`)
                            .then(response => response.json())
                            .then(callData => {
                                if (callData && callData.callId) {
                                    callId = callData.callId;

                                    // Only show the invitation if the call is still pending or active
                                    if (callData.status !== "Ended" && callData.status !== "Missed") {
                                        // Hide the no video placeholder
                                        document.getElementById("noVideoText").style.display = "none";

                                        // Show incoming call in main area
                                        document.getElementById("incomingCall").classList.remove("hidden");
                                        document.getElementById("callMessage").innerText = `You have been invited to a video call by ${data.senderName}`;
                                        document.getElementById("joinCallBtn").setAttribute("data-sender-id", data.senderId);
                                    } else {
                                        // If the call was ended, show the no video placeholder
                                        document.getElementById("noVideoText").style.display = "flex";
                                        document.getElementById("incomingCall").classList.add("hidden");
                                    }
                                } else {
                                    // No active call found, show the no video placeholder
                                    document.getElementById("noVideoText").style.display = "flex";
                                    document.getElementById("incomingCall").classList.add("hidden");
                                }
                            })
                            .catch(error => {
                                console.error("❌ Error checking call status:", error);
                                // Default to showing the invitation if we can't check the status
                                document.getElementById("noVideoText").style.display = "none";
                                document.getElementById("incomingCall").classList.remove("hidden");
                                document.getElementById("callMessage").innerText = `You have been invited to a video call by ${data.senderName}`;
                                document.getElementById("joinCallBtn").setAttribute("data-sender-id", data.senderId);
                            });
                    } else {
                        // Show no video placeholder if no call
                        document.getElementById("noVideoText").style.display = "flex";

                        // Hide incoming call
                        document.getElementById("incomingCall").classList.add("hidden");
                        document.getElementById("callMessage").innerText = "";
                    }
                })
                .catch(error => console.error("❌ Error checking for invites:", error.message));
        }

        document.getElementById("joinCallBtn").addEventListener("click", async function () {
            let senderId = this.getAttribute("data-sender-id");

            try {
                const response = await fetch(`/api/videoconference/accept-invite/${senderId}`, {
                    method: "POST"
                });

                const data = await response.json();

                if (!response.ok) {
                    throw new Error(data.error || "Failed to accept call");
                }

                if (data.success) {
                    targetUserId = senderId;
                    callId = data.callId;

                    // Hide incoming call UI
                    const incomingCallElement = document.getElementById("incomingCall");
                    incomingCallElement.classList.add("hidden");
                    incomingCallElement.style.display = "none";
                    document.getElementById("callMessage").innerText = "";

                    // Disable search field during call
                    document.getElementById("searchUsers").disabled = true;
                    document.getElementById("searchUsers").classList.add("disabled");
                    document.getElementById("clearSearch").style.opacity = "0";
                    
                    // Hide user selection UI elements
                    document.getElementById("selectedContact").classList.add("hidden");
                    document.getElementById("emptySelection").classList.add("hidden");
                    document.getElementById("startCallBtn").classList.add("hidden");

                    if (missedCallTimer) {
                        clearTimeout(missedCallTimer);
                        missedCallTimer = null;
                    }

                    try {
                        // Get camera/mic access ONLY after accepting
                        localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });

                        // Show our video in main area initially
                        localVideo.srcObject = localStream;
                        localVideo.style.display = 'block';
                        localVideo.classList.remove('hidden');
                        remoteVideo.style.display = 'none';

                        // Hide placeholder
                        document.getElementById('noVideoText').style.display = 'none';

                        // Initialize WebRTC
                        initializeWebRTC();

                        // Create and send offer
                        const offer = await peerConnection.createOffer();
                        await peerConnection.setLocalDescription(offer);
                        await sendSignalSafely(targetUserId, JSON.stringify(offer));

                        // Mark call as active
                        await fetch(`/api/videoconference/mark-call-active/${callId}`, { method: "POST" });
                    } catch (error) {
                        console.error("❌ Error setting up media devices:", error);
                        
                        // Re-enable search field on error
                        document.getElementById("searchUsers").disabled = false;
                        document.getElementById("searchUsers").classList.remove("disabled");
                        document.getElementById("clearSearch").style.opacity = "1";
                        
                        // Show empty selection again
                        document.getElementById("emptySelection").classList.remove("hidden");
                    }
                }
            } catch (error) {
                console.error("❌ Error accepting invite:", error.message);
                
                // Re-enable search field on error
                document.getElementById("searchUsers").disabled = false;
                document.getElementById("searchUsers").classList.remove("disabled");
                document.getElementById("clearSearch").style.opacity = "1";
                
                // Show empty selection again
                document.getElementById("emptySelection").classList.remove("hidden");
            }
        });


    });</script>
