@model IEnumerable<Managly.Models.UserManagement>

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@{
    var token = Antiforgery.GetAndStoreTokens(Context).RequestToken;
}

@{
    ViewData["Title"] = "User Management";
    var availableRoles = (IEnumerable<string>)ViewData["AvailableRoles"];
}

<!-- Include Custom CSS -->
<link rel="stylesheet" href="~/css/Admin/UserManagement.css">

<!-- Include Bootstrap Icons for UI Enhancements -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<div class="user-management-container">
    <div id="toastContainer" class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1050;"></div>

    <div class="form-header text-center">
        <div class="header-icon">
            <i class="fas fa-users"></i>
        </div>
        <h1>User Management</h1>
        <p>Manage your company's team members</p>
        <a href="/Admin/CreateProfile" class="create-profile-btn">
            <i class="fas fa-user-plus"></i>
            Create New Profile
        </a>
    </div>

    <!-- Enhanced Search and Filter Section -->
    <div class="filters-section">
        <div class="search-wrapper">
            <div class="search-container">
                <div class="search-box">
                    <i class="fas fa-search search-icon"></i>
                    <input type="text"
                           id="userSearch"
                           class="form-control search-input"
                           placeholder="Search by name..."
                           autocomplete="off">
                </div>
            </div>
            <div class="filter-container">
                <div class="role-filter">
                    <select id="roleFilter" class="form-select">
                        <option value="">All Roles</option>
                        @foreach (var role in availableRoles)
                        {
                            <option value="@role">@role</option>
                        }
                    </select>
                </div>
                <button id="clearFilters" class="btn btn-outline-secondary">
                    <i class="fas fa-times"></i> Clear
                </button>
            </div>
        </div>
    </div>

    <!-- Modern Table -->
    <div class="table-responsive user-table">
        <table class="table">
            <thead>
                <tr>
                    <th>
                        <div class="d-flex align-items-center gap-2 cursor-pointer" data-sort="name">
                            Name
                            <i class="fas fa-sort sort-icon"></i>
                        </div>
                    </th>
                    <th>
                        <div class="d-flex align-items-center gap-2 cursor-pointer" data-sort="email">
                            Email
                            <i class="fas fa-sort sort-icon"></i>
                        </div>
                    </th>
                    <th>Projects</th>
                    <th>Role</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="userTableBody">
                @foreach (var user in Model)
                {
                    <tr data-user-name="@user.Name.ToLower()" data-user-email="@user.Email.ToLower()" data-user-role="@user.Roles">
                        <td>
                            <div class="user-info cursor-pointer" data-bs-toggle="modal" data-bs-target="#userModal-@user.UserId">
                                <div class="user-avatar">@user.Name[0].ToString().ToUpper()</div>
                                <span>@user.Name</span>
                            </div>
                        </td>
                        <td>@user.Email</td>
                        <td>
                            @if (user.AssignedProjects.Any())
                            {
                                <div class="project-badges">
                                    @foreach (var project in user.AssignedProjects)
                                    {
                                        <span href="/Projects/Details?projectId=@project.ProjectId"
                                              class="project-badge"
                                              title="@project.ProjectName (@project.Role)">
                                            @project.ProjectName
                                        </span>
                                    }
                                </div>
                            }
                            else
                            {
                                <span class="text-muted">No projects assigned</span>
                            }
                        </td>
                        <td>
                            <form asp-action="UpdateUserRole" asp-controller="Admin" method="post" class="role-form">
                                <input type="hidden" name="userId" value="@user.UserId" />
                                <select name="role" class="form-select role-select" data-user-name="@user.Name">
                                    @foreach (var role in availableRoles)
                                    {
                                        <option value="@role" selected="@(user.Roles.Equals(role))">@role</option>
                                    }
                                </select>
                            </form>
                        </td>
                        <td>
                            <button class="btn btn-danger btn-sm" data-bs-toggle="modal" data-bs-target="#deleteModal-@user.UserId">
                                <i class="fas fa-trash-alt"></i>
                            </button>

                            <!-- Delete Modal -->
                            <div class="modal fade" id="deleteModal-@user.UserId" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title">Confirm Delete</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body">
                                            <p>Are you sure you want to delete <strong>@user.Name</strong>?</p>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                            <button type="button" class="btn btn-danger delete-confirm"
                                                    data-user-id="@user.UserId"
                                                    data-bs-dismiss="modal">
                                                Delete
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </td>
                    </tr>

                    <!-- User Details Modal - Move it here, inside the foreach loop -->
                    <div class="modal fade" id="userModal-@user.UserId" tabindex="-1" aria-labelledby="userModalLabel-@user.UserId" aria-hidden="true">
                        <div class="modal-dialog modal-lg">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="userModalLabel-@user.UserId">User Profile</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <div class="user-profile-container">
                                        <div class="profile-header">
                                            <div class="profile-image">
                                                @if (!string.IsNullOrEmpty(user.ProfilePicturePath))
                                                {
                                                    <img src="@user.ProfilePicturePath" alt="@user.Name's profile picture" class="rounded-circle">
                                                }
                                                else
                                                {
                                                    <div class="profile-initial">@user.Name[0].ToString().ToUpper()</div>
                                                }
                                            </div>
                                            <div class="profile-basic-info">
                                                <h3>@user.Name @user.LastName</h3>
                                                <p class="text-muted">@user.Roles</p>
                                                <a href="/chat?userId=@user.UserId" class="btn btn-primary mt-2">
                                                    <i class="fas fa-comment-alt"></i> Message
                                                </a>
                                            </div>
                                        </div>

                                        <div class="profile-details mt-4">
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <h6 class="detail-heading">Contact Information</h6>
                                                    <div class="detail-item">
                                                        <i class="fas fa-envelope"></i>
                                                        <span>@user.Email</span>
                                                    </div>
                                                    @if (!string.IsNullOrEmpty(user.PhoneNumber))
                                                    {
                                                        <div class="detail-item">
                                                            <i class="fas fa-phone"></i>
                                                            <span>@user.PhoneNumber</span>
                                                        </div>
                                                    }
                                                </div>
                                                <div class="col-md-6">
                                                    <h6 class="detail-heading">Personal Information</h6>
                                                    <div class="detail-item">
                                                        <i class="fas fa-birthday-cake"></i>
                                                        <span>@(user.DateOfBirth?.ToString("MMMM d, yyyy") ?? "Not specified")</span>
                                                    </div>
                                                    <div class="detail-item">
                                                        <i class="fas fa-venus-mars"></i>
                                                        <span>@user.Gender</span>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="row mt-4">
                                                <div class="col-12">
                                                    <h6 class="detail-heading">Location</h6>
                                                    <div class="detail-item">
                                                        <i class="fas fa-map-marker-alt"></i>
                                                        <span>
                                                            @(!string.IsNullOrEmpty(user.Address) ? user.Address + ", " : "")
                                                            @(!string.IsNullOrEmpty(user.City) ? user.City + ", " : "")
                                                            @(user.Country ?? "Not specified")
                                                        </span>
                                                    </div>
                                                </div>
                                            </div>

                                            @if (user.AssignedProjects.Any())
                                            {
                                                <div class="row mt-4">
                                                    <div class="col-12">
                                                        <h6 class="detail-heading">Assigned Projects</h6>
                                                        <div class="project-badges mt-2">
                                                            @foreach (var project in user.AssignedProjects)
                                                            {
                                                                <span class="project-badge" title="Role: @project.Role">
                                                                    @project.ProjectName
                                                                </span>
                                                            }
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Add this modal to the bottom of your page -->
<div class="modal fade" id="confirmRoleChangeModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Role Change</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to change the role of <strong id="roleUserName"></strong> to <strong id="newRole"></strong>?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmRoleChange">Confirm</button>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('userSearch');
    const searchResults = document.getElementById('searchResults');
    const roleFilter = document.getElementById('roleFilter');
    const clearFiltersBtn = document.getElementById('clearFilters');
    const rows = document.querySelectorAll('#userTableBody tr');

    // Enhanced search functionality
    searchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase().trim();

        rows.forEach(row => {
            const name = row.getAttribute('data-user-name');
            const email = row.getAttribute('data-user-email');
            const role = row.getAttribute('data-user-role');
            const roleFilterValue = roleFilter.value.toLowerCase();

            const matchesSearch = searchTerm === '' ||
                                name.includes(searchTerm) ||
                                email.includes(searchTerm);

            const matchesRole = roleFilterValue === '' ||
                              role.toLowerCase() === roleFilterValue;

            row.style.display = (matchesSearch && matchesRole) ? '' : 'none';
        });
    });

    // Role filter functionality
    roleFilter.addEventListener('change', function() {
        const searchTerm = searchInput.value.toLowerCase().trim();
        const roleValue = this.value.toLowerCase();

        rows.forEach(row => {
            const name = row.getAttribute('data-user-name');
            const email = row.getAttribute('data-user-email');
            const role = row.getAttribute('data-user-role');

            const matchesSearch = searchTerm === '' ||
                                name.includes(searchTerm) ||
                                email.includes(searchTerm);

            const matchesRole = roleValue === '' ||
                              role.toLowerCase() === roleValue;

            row.style.display = (matchesSearch && matchesRole) ? '' : 'none';
        });
    });

    // Clear filters
    clearFiltersBtn.addEventListener('click', function() {
        searchInput.value = '';
        roleFilter.value = '';
        rows.forEach(row => row.style.display = '');
        showToast('Filters cleared', 'success');
    });

    // Role change handling
    let activeForm = null;
    let originalValue = null;

    document.querySelectorAll('.role-select').forEach(select => {
        // Store original value
        select.dataset.originalValue = select.value;

        select.addEventListener('change', function(e) {
            e.preventDefault();
            const userName = this.getAttribute('data-user-name');
            const newRole = this.value;
            activeForm = this.closest('form');
            originalValue = this.dataset.originalValue;

            // Update modal content
            document.getElementById('roleUserName').textContent = userName;
            document.getElementById('newRole').textContent = newRole;

            // Show modal
            const modal = new bootstrap.Modal(document.getElementById('confirmRoleChangeModal'));
            modal.show();
        });
    });

    // Update the role change confirmation handler
    document.getElementById('confirmRoleChange').addEventListener('click', function() {
        if (activeForm) {
            const formData = new FormData(activeForm);
            const userId = formData.get('userId');
            const newRole = formData.get('role');

            fetch(activeForm.action, {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                const modal = bootstrap.Modal.getInstance(document.getElementById('confirmRoleChangeModal'));
                modal.hide();

                if (data.success) {
                    // Update the UI immediately
                    const row = activeForm.closest('tr');
                    if (row) {
                        // Update the data attribute
                        row.setAttribute('data-user-role', newRole);

                        // Update the select element in the table
                        const roleSelect = row.querySelector('.role-select');
                        if (roleSelect) {
                            roleSelect.value = newRole;
                            roleSelect.dataset.originalValue = newRole; // Update the original value
                        }

                        // Update the role in the user details modal if it exists
                        const userModal = document.querySelector(`#userModal-${userId}`);
                        if (userModal) {
                            const roleText = userModal.querySelector('.profile-basic-info p.text-muted');
                            if (roleText) {
                                roleText.textContent = newRole;
                            }
                        }
                    }

                    showToast(data.message, 'success');
                } else {
                    showToast(data.message, 'error');
                    // Revert the select to original value
                    activeForm.querySelector('select').value = originalValue;
                }
            })
            .catch(error => {
                showToast('An error occurred while updating the role.', 'error');
                // Revert the select to original value
                activeForm.querySelector('select').value = originalValue;
                const modal = bootstrap.Modal.getInstance(document.getElementById('confirmRoleChangeModal'));
                modal.hide();
            });
        }
    });

    // Handle modal dismissal
    document.getElementById('confirmRoleChangeModal').addEventListener('hidden.bs.modal', function() {
        if (activeForm && originalValue) {
            activeForm.querySelector('select').value = originalValue;
        }
        activeForm = null;
        originalValue = null;
    });

    // Delete user handling
    document.querySelectorAll('.delete-confirm').forEach(button => {
        button.addEventListener('click', function() {
            const userId = this.getAttribute('data-user-id');

            fetch('/Admin/DeleteUser', {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': '@token'
                },
                body: new URLSearchParams({ userId: userId })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const row = this.closest('tr');
                    if (row) {
                        row.remove();
                    }
                    showToast(data.message, 'success');
                } else {
                    showToast(data.message, 'error');
                }
            })
            .catch(error => {
                showToast('An error occurred while deleting the user.', 'error');
            });
        });
    });
});

// Add sorting functionality
let currentSort = {
    column: '',
    direction: 'asc'
};

document.querySelectorAll('th div[data-sort]').forEach(header => {
    header.addEventListener('click', function() {
        const sortColumn = this.getAttribute('data-sort');
        const icon = this.querySelector('.sort-icon');

        // Reset other icons
        document.querySelectorAll('.sort-icon').forEach(i => {
            if (i !== icon) {
                i.className = 'fas fa-sort sort-icon';
            }
        });

        // Update sort direction
        if (currentSort.column === sortColumn) {
            currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
        } else {
            currentSort.column = sortColumn;
            currentSort.direction = 'asc';
        }

        // Update icon
        icon.className = `fas fa-sort-${currentSort.direction === 'asc' ? 'up' : 'down'} sort-icon`;

        // Get all rows and convert to array for sorting
        const tbody = document.querySelector('#userTableBody');
        const rows = Array.from(tbody.querySelectorAll('tr'));

        // Sort rows
        rows.sort((a, b) => {
            let aValue, bValue;

            if (sortColumn === 'name') {
                aValue = a.querySelector('.user-info span').textContent.trim().toLowerCase();
                bValue = b.querySelector('.user-info span').textContent.trim().toLowerCase();
            } else if (sortColumn === 'email') {
                aValue = a.querySelector('td:nth-child(2)').textContent.trim().toLowerCase();
                bValue = b.querySelector('td:nth-child(2)').textContent.trim().toLowerCase();
            }

            if (currentSort.direction === 'asc') {
                return aValue > bValue ? 1 : -1;
            } else {
                return aValue < bValue ? 1 : -1;
            }
        });

        // Reorder rows in the DOM
        rows.forEach(row => tbody.appendChild(row));
    });
});
</script>